ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB246:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include <string.h>
  27:Core/Src/main.c **** #include <stdio.h>
  28:Core/Src/main.c **** //#include "trian_adc_driver.h"
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 2


  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** //Device Address
  39:Core/Src/main.c **** //Please note that arduino uses 7 bit addresses, STM32 uses 8
  40:Core/Src/main.c **** #define BH1750_NO_GROUND_ADDR_WRITE     (0xB9 + 0)
  41:Core/Src/main.c **** #define BH1750_NO_GROUND_ADDR_READ      (0xB9 + 1)
  42:Core/Src/main.c **** #define BH1750_GROUND_ADDR_WRITE        (0x46 + 0)
  43:Core/Src/main.c **** #define BH1750_GROUND_ADDR_READ         (0x46 + 1)
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** //instructions
  46:Core/Src/main.c **** //datasheet ref http://cpre.kmutnb.ac.th/esl/learning/bh1750-light-sensor/bh1750fvi-e_datasheet.pdf
  47:Core/Src/main.c **** #define CMD_POWER_DOWN          0x00
  48:Core/Src/main.c **** #define CMD_POWER_ON            0x01
  49:Core/Src/main.c **** #define CMD_RESET               0x03
  50:Core/Src/main.c **** #define CMD_H_RES_MODE          0x10
  51:Core/Src/main.c **** #define CMD_H_RES_MODE2         0x11
  52:Core/Src/main.c **** #define CMD_L_RES_MODE          0x13
  53:Core/Src/main.c **** #define CMD_ONE_H_RES_MODE      0x20
  54:Core/Src/main.c **** #define CMD_ONE_H_RES_MODE2     0x21
  55:Core/Src/main.c **** #define CMD_ONE_L_RES_MODE      0x23
  56:Core/Src/main.c **** #define CMD_CNG_TIME_HIGH       0x30    // 3 LSB set time
  57:Core/Src/main.c **** #define CMD_CNG_TIME_LOW        0x60    // 5 LSB set time
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** #ifndef bool
  60:Core/Src/main.c **** #define bool    uint8_t
  61:Core/Src/main.c **** #endif
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** #ifndef true
  64:Core/Src/main.c **** #define true    1
  65:Core/Src/main.c **** #endif
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** #ifndef false
  68:Core/Src/main.c **** #define false   0
  69:Core/Src/main.c **** #endif
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* USER CODE END PD */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  74:Core/Src/main.c **** /* USER CODE BEGIN PM */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* USER CODE END PM */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  79:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** UART_HandleTypeDef huart2;
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** /* USER CODE BEGIN PV */
  88:Core/Src/main.c **** static const uint16_t BH1750_ADDR = 0x23;
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 3


  89:Core/Src/main.c **** uint8_t buff[2];
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* USER CODE END PV */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  94:Core/Src/main.c **** void SystemClock_Config(void);
  95:Core/Src/main.c **** static void MX_GPIO_Init(void);
  96:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  97:Core/Src/main.c **** static void MX_I2C1_Init(void);
  98:Core/Src/main.c **** static void MX_ADC1_Init(void);
  99:Core/Src/main.c **** static void MX_SPI1_Init(void);
 100:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 101:Core/Src/main.c **** //void ADC_Init(void);
 102:Core/Src/main.c **** //void ADC_conversion(void);
 103:Core/Src/main.c **** //int ADC_read(void);
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END PFP */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 108:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* USER CODE END 0 */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /**
 113:Core/Src/main.c ****   * @brief  The application entry point.
 114:Core/Src/main.c ****   * @retval int
 115:Core/Src/main.c ****   */
 116:Core/Src/main.c **** int main(void)
 117:Core/Src/main.c **** {
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 120:Core/Src/main.c ****   
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* USER CODE END 1 */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 127:Core/Src/main.c ****   HAL_Init();
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   uint8_t buf[12], i2c_buf[2], serialbuf[20];
 132:Core/Src/main.c ****   char str[32];
 133:Core/Src/main.c ****   uint32_t analog_value;
 134:Core/Src/main.c ****   int size_len;
 135:Core/Src/main.c ****   uint16_t addr = 4;
 136:Core/Src/main.c ****   HAL_StatusTypeDef ret;
 137:Core/Src/main.c ****   uint16_t ADCData = 0;
 138:Core/Src/main.c ****   uint8_t pinValue = 1;
 139:Core/Src/main.c ****   
 140:Core/Src/main.c ****   //uint32_t analog_value;
 141:Core/Src/main.c ****   /* USER CODE END Init */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* Configure the system clock */
 144:Core/Src/main.c ****   SystemClock_Config();
 145:Core/Src/main.c **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 4


 146:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* USER CODE END SysInit */
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* Initialize all configured peripherals */
 151:Core/Src/main.c ****   MX_GPIO_Init();
 152:Core/Src/main.c ****   MX_USART2_UART_Init();
 153:Core/Src/main.c ****   MX_I2C1_Init();
 154:Core/Src/main.c ****   //MX_ADC1_Init();
 155:Core/Src/main.c ****   MX_SPI1_Init();
 156:Core/Src/main.c ****   ADC_Init(pinValue);
 157:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****   strcpy((char*)buf, "Start!\r\n");
 160:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 161:Core/Src/main.c ****   //strcpy((char*)buf, "Hello!\r\n");
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   
 164:Core/Src/main.c ****   /*ret = HAL_I2C_Master_Transmit(&hi2c1, BH1750_GROUND_ADDR_WRITE, i2c_buf, 1, 200);
 165:Core/Src/main.c ****   if(ret == HAL_OK){ 
 166:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 167:Core/Src/main.c ****       strcpy((char*)serialbuf, "Power ON\r\n");
 168:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 169:Core/Src/main.c ****   }else{
 170:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 171:Core/Src/main.c ****       strcpy((char*)serialbuf, "Error Power\r\n");
 172:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 173:Core/Src/main.c ****   }*/
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /*
 176:Core/Src/main.c ****     i2c_buf[0] = 0b00000001;
 177:Core/Src/main.c ****     ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0b01000110, i2c_buf, 1, 200);
 178:Core/Src/main.c ****     if(ret == HAL_OK){      
 179:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 180:Core/Src/main.c ****       strcpy((char*)serialbuf, "Transmited 1\r\n");
 181:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 182:Core/Src/main.c ****     }else{
 183:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
 184:Core/Src/main.c ****         strcpy((char*)serialbuf, "Failed Power\r\n");
 185:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 186:Core/Src/main.c ****     }
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****     i2c_buf[0] = 0b00010000;
 189:Core/Src/main.c ****     ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0b01000110, i2c_buf, 1, 200);
 190:Core/Src/main.c ****     if(ret == HAL_OK){      
 191:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 192:Core/Src/main.c ****       strcpy((char*)serialbuf, "Transmited 2\r\n");
 193:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 194:Core/Src/main.c ****     }else{
 195:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
 196:Core/Src/main.c ****         strcpy((char*)serialbuf, "Failed data\r\n");
 197:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 198:Core/Src/main.c ****     }*/
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* USER CODE END 2 */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* Infinite loop */
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 5


 203:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 204:Core/Src/main.c ****   while (1)
 205:Core/Src/main.c ****   {
 206:Core/Src/main.c ****     ADC_conversion();
 207:Core/Src/main.c ****     
 208:Core/Src/main.c ****     
 209:Core/Src/main.c ****     ADCData = ADC_read();
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****     //strcpy((char*)serialbuf, ADCData);
 212:Core/Src/main.c ****     size_len = sprintf(str, "%d\r\n", ADCData);
 213:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****     //HAL_ADC_Start(&hadc1);
 216:Core/Src/main.c **** 	  //if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 217:Core/Src/main.c **** 
 218:Core/Src/main.c **** 		  //analog_value = HAL_ADC_GetValue(&hadc1);
 219:Core/Src/main.c ****       //size_len = sprintf(str, "%lu\r\n", analog_value);
 220:Core/Src/main.c ****       //HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 221:Core/Src/main.c **** 	  //}
 222:Core/Src/main.c **** 	  //HAL_ADC_Stop(&hadc1);
 223:Core/Src/main.c **** 	  //HAL_Delay(1000);
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****     /*
 227:Core/Src/main.c **** 	  ret = BH1750_send_command(dev, CMD_RESET);
 228:Core/Src/main.c ****         if(ret == HAL_OK){ 
 229:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 230:Core/Src/main.c ****       strcpy((char*)serialbuf, "Reset\r\n");
 231:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 232:Core/Src/main.c ****       }else{
 233:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
 234:Core/Src/main.c ****         strcpy((char*)serialbuf, "Reset Fail\r\n");
 235:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 236:Core/Src/main.c ****       }
 237:Core/Src/main.c **** 
 238:Core/Src/main.c **** 	  ret = BH1750_send_command(dev, CMD_H_RES_MODE);
 239:Core/Src/main.c ****         if(ret == HAL_OK){ 
 240:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 241:Core/Src/main.c ****       strcpy((char*)serialbuf, "RES MODE ON\r\n");
 242:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 243:Core/Src/main.c ****       }else{
 244:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
 245:Core/Src/main.c ****         strcpy((char*)serialbuf, "RES MODE FAIL\r\n");
 246:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 247:Core/Src/main.c ****       }
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****     ret = HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDR, i2c_buf, 1, 200);
 250:Core/Src/main.c ****     if(ret != HAL_OK){
 251:Core/Src/main.c ****       strcpy((char*)serialbuf, "Error Rx\r\n");
 252:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 253:Core/Src/main.c ****     }*/
 254:Core/Src/main.c ****   
 255:Core/Src/main.c ****     //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 256:Core/Src/main.c ****     //HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 257:Core/Src/main.c ****     //HAL_Delay(500);
 258:Core/Src/main.c ****     
 259:Core/Src/main.c **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 6


 260:Core/Src/main.c ****     strcpy((char*)i2c_buf, "");
 261:Core/Src/main.c ****     ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)0b01000111, i2c_buf, 2, 200);
 262:Core/Src/main.c ****     if(ret == HAL_OK){      
 263:Core/Src/main.c ****       //size_len = sprintf(str, "%lu\r\n", i2c_buf);
 264:Core/Src/main.c ****       //uint8_t a = i2c_buf[0];
 265:Core/Src/main.c ****       //uint8_t b = i2c_buf[1];
 266:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 267:Core/Src/main.c ****       strcpy((char*)serialbuf, "Received Data\r\n");
 268:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 269:Core/Src/main.c ****       uint16_t raw_lux = (i2c_buf[0] << 8 | i2c_buf[1]);
 270:Core/Src/main.c ****       float lux = raw_lux/1.2;
 271:Core/Src/main.c ****       sprintf(str, sizeof(str), "<%.2f>", lux);
 272:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 273:Core/Src/main.c ****     }else{
 274:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
 275:Core/Src/main.c ****         strcpy((char*)serialbuf, "Failed\r\n");
 276:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 277:Core/Src/main.c ****     }
 278:Core/Src/main.c ****     HAL_Delay(1000);
 279:Core/Src/main.c ****     
 280:Core/Src/main.c ****     /* USER CODE END WHILE */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 283:Core/Src/main.c ****   }
 284:Core/Src/main.c ****   /* USER CODE END 3 */
 285:Core/Src/main.c **** }
 286:Core/Src/main.c **** 
 287:Core/Src/main.c **** /**
 288:Core/Src/main.c ****   * @brief System Clock Configuration
 289:Core/Src/main.c ****   * @retval None
 290:Core/Src/main.c ****   */
 291:Core/Src/main.c **** void SystemClock_Config(void)
 292:Core/Src/main.c **** {
 293:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 294:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 299:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 302:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 303:Core/Src/main.c ****   */
 304:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 305:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 306:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 307:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 308:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 309:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 310:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 311:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 312:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 313:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 314:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 315:Core/Src/main.c ****   {
 316:Core/Src/main.c ****     Error_Handler();
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 7


 317:Core/Src/main.c ****   }
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 320:Core/Src/main.c ****   */
 321:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 322:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 323:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 324:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 325:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 326:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 329:Core/Src/main.c ****   {
 330:Core/Src/main.c ****     Error_Handler();
 331:Core/Src/main.c ****   }
 332:Core/Src/main.c **** }
 333:Core/Src/main.c **** 
 334:Core/Src/main.c **** /**
 335:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 336:Core/Src/main.c ****   * @param None
 337:Core/Src/main.c ****   * @retval None
 338:Core/Src/main.c ****   */
 339:Core/Src/main.c **** //static void MX_ADC1_Init(void)
 340:Core/Src/main.c **** //{
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 343:Core/Src/main.c **** 
 344:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   //ADC_ChannelConfTypeDef sConfig = {0};
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 353:Core/Src/main.c ****   */
 354:Core/Src/main.c ****   //hadc1.Instance = ADC1;
 355:Core/Src/main.c ****   //hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 356:Core/Src/main.c ****   //hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 357:Core/Src/main.c ****   //hadc1.Init.ScanConvMode = DISABLE;
 358:Core/Src/main.c ****   //hadc1.Init.ContinuousConvMode = DISABLE;
 359:Core/Src/main.c ****   //hadc1.Init.DiscontinuousConvMode = DISABLE;
 360:Core/Src/main.c ****   //hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 361:Core/Src/main.c ****   //hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 362:Core/Src/main.c ****   //hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 363:Core/Src/main.c ****   //hadc1.Init.NbrOfConversion = 1;
 364:Core/Src/main.c ****   //hadc1.Init.DMAContinuousRequests = DISABLE;
 365:Core/Src/main.c ****   //hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 366:Core/Src/main.c ****   //if (HAL_ADC_Init(&hadc1) != HAL_OK)
 367:Core/Src/main.c ****   //{
 368:Core/Src/main.c ****   //  Error_Handler();
 369:Core/Src/main.c ****   //}
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 372:Core/Src/main.c ****   */
 373:Core/Src/main.c ****   //sConfig.Channel = ADC_CHANNEL_0;
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 8


 374:Core/Src/main.c ****   //sConfig.Rank = 1;
 375:Core/Src/main.c ****   //sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 376:Core/Src/main.c ****   //if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 377:Core/Src/main.c ****   //{
 378:Core/Src/main.c ****   //  Error_Handler();
 379:Core/Src/main.c ****   //}
 380:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 381:Core/Src/main.c **** 
 382:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** //}
 385:Core/Src/main.c **** 
 386:Core/Src/main.c **** /**
 387:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 388:Core/Src/main.c ****   * @param None
 389:Core/Src/main.c ****   * @retval None
 390:Core/Src/main.c ****   */
 391:Core/Src/main.c **** static void MX_I2C1_Init(void)
 392:Core/Src/main.c **** {
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 399:Core/Src/main.c **** 
 400:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 401:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 402:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 403:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 404:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 405:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 406:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 407:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 408:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 409:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 410:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 411:Core/Src/main.c ****   {
 412:Core/Src/main.c ****     Error_Handler();
 413:Core/Src/main.c ****   }
 414:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 415:Core/Src/main.c **** 
 416:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 417:Core/Src/main.c **** 
 418:Core/Src/main.c **** }
 419:Core/Src/main.c **** 
 420:Core/Src/main.c **** /**
 421:Core/Src/main.c ****   * @brief USART2 Initialization Function
 422:Core/Src/main.c ****   * @param None
 423:Core/Src/main.c ****   * @retval None
 424:Core/Src/main.c ****   */
 425:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 426:Core/Src/main.c **** {
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 429:Core/Src/main.c **** 
 430:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 9


 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 435:Core/Src/main.c ****   huart2.Instance = USART2;
 436:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 437:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 438:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 439:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 440:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 441:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 442:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 443:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 444:Core/Src/main.c ****   {
 445:Core/Src/main.c ****     Error_Handler();
 446:Core/Src/main.c ****   }
 447:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 448:Core/Src/main.c **** 
 449:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** }
 452:Core/Src/main.c **** 
 453:Core/Src/main.c **** /**
 454:Core/Src/main.c ****   * @brief GPIO Initialization Function
 455:Core/Src/main.c ****   * @param None
 456:Core/Src/main.c ****   * @retval None
 457:Core/Src/main.c ****   */
 458:Core/Src/main.c **** static void MX_GPIO_Init(void)
 459:Core/Src/main.c **** {
  28              		.loc 1 459 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 56
 460:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 460 3 view .LVU1
  42              		.loc 1 460 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 461:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 462:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 463:Core/Src/main.c **** 
 464:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 465:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 465 3 is_stmt 1 view .LVU3
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 10


  50              	.LBB4:
  51              		.loc 1 465 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 465 3 view .LVU5
  54 0012 224B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 465 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 465 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 465 3 view .LVU8
 466:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 466 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 466 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 466 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 466 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 466 3 view .LVU13
  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 466 3 view .LVU14
 467:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 467 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 467 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 467 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 467 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 467 3 view .LVU19
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 467 3 view .LVU20
 468:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 468 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 468 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 468 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 11


 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 468 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 468 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 468 3 view .LVU26
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 471:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 114              		.loc 1 471 3 view .LVU27
 115 0062 0F4D     		ldr	r5, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 2021     		movs	r1, #32
 118 0068 2846     		mov	r0, r5
 119 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 472:Core/Src/main.c **** 
 473:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 474:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 121              		.loc 1 474 3 view .LVU28
 122              		.loc 1 474 23 is_stmt 0 view .LVU29
 123 006e 4FF40053 		mov	r3, #8192
 124 0072 0593     		str	r3, [sp, #20]
 475:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 125              		.loc 1 475 3 is_stmt 1 view .LVU30
 126              		.loc 1 475 24 is_stmt 0 view .LVU31
 127 0074 4FF40413 		mov	r3, #2162688
 128 0078 0693     		str	r3, [sp, #24]
 476:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 476 3 is_stmt 1 view .LVU32
 130              		.loc 1 476 24 is_stmt 0 view .LVU33
 131 007a 0794     		str	r4, [sp, #28]
 477:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 132              		.loc 1 477 3 is_stmt 1 view .LVU34
 133 007c 05A9     		add	r1, sp, #20
 134 007e 0948     		ldr	r0, .L3+8
 135 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 478:Core/Src/main.c **** 
 479:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 480:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 137              		.loc 1 480 3 view .LVU35
 138              		.loc 1 480 23 is_stmt 0 view .LVU36
 139 0084 2023     		movs	r3, #32
 140 0086 0593     		str	r3, [sp, #20]
 481:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 141              		.loc 1 481 3 is_stmt 1 view .LVU37
 142              		.loc 1 481 24 is_stmt 0 view .LVU38
 143 0088 0123     		movs	r3, #1
 144 008a 0693     		str	r3, [sp, #24]
 482:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 482 3 is_stmt 1 view .LVU39
 146              		.loc 1 482 24 is_stmt 0 view .LVU40
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 12


 147 008c 0794     		str	r4, [sp, #28]
 483:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 148              		.loc 1 483 3 is_stmt 1 view .LVU41
 149              		.loc 1 483 25 is_stmt 0 view .LVU42
 150 008e 0894     		str	r4, [sp, #32]
 484:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 151              		.loc 1 484 3 is_stmt 1 view .LVU43
 152 0090 05A9     		add	r1, sp, #20
 153 0092 2846     		mov	r0, r5
 154 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL2:
 485:Core/Src/main.c **** 
 486:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 487:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 488:Core/Src/main.c **** }
 156              		.loc 1 488 1 is_stmt 0 view .LVU44
 157 0098 0BB0     		add	sp, sp, #44
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 12
 160              		@ sp needed
 161 009a 30BD     		pop	{r4, r5, pc}
 162              	.L4:
 163              		.align	2
 164              	.L3:
 165 009c 00380240 		.word	1073887232
 166 00a0 00000240 		.word	1073872896
 167 00a4 00080240 		.word	1073874944
 168              		.cfi_endproc
 169              	.LFE246:
 171              		.section	.text.Error_Handler,"ax",%progbits
 172              		.align	1
 173              		.global	Error_Handler
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 178              	Error_Handler:
 179              	.LFB248:
 489:Core/Src/main.c **** 
 490:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 491:Core/Src/main.c **** 
 492:Core/Src/main.c **** static void MX_SPI1_Init(){
 493:Core/Src/main.c **** 
 494:Core/Src/main.c ****   hspi1.Instance = SPI1;
 495:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 496:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 497:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 498:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 499:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 500:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 501:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 502:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 503:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 504:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 505:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 506:Core/Src/main.c ****   if(HAL_SPI_Init(&hspi1) != HAL_OK)
 507:Core/Src/main.c ****     Error_Handler();
 508:Core/Src/main.c **** }
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 13


 509:Core/Src/main.c **** 
 510:Core/Src/main.c **** /* START OF BH1750 COMMUNICATION FUNCTIONS*/
 511:Core/Src/main.c **** /*HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
 512:Core/Src/main.c **** {
 513:Core/Src/main.c **** 	//TODO hal checks
 514:Core/Src/main.c **** 	if(HAL_I2C_Master_Transmit(
 515:Core/Src/main.c **** 			dev->i2c_handle,	//I2C Handle
 516:Core/Src/main.c **** 			dev->address_w,		//I2C addr of dev
 517:Core/Src/main.c **** 			&cmd,				//CMD to be executed
 518:Core/Src/main.c **** 			1,					//8bit addr
 519:Core/Src/main.c **** 			10					//Wait time
 520:Core/Src/main.c **** 		) != HAL_OK) return HAL_ERROR;
 521:Core/Src/main.c **** 
 522:Core/Src/main.c **** 	return HAL_OK;
 523:Core/Src/main.c **** }*/
 524:Core/Src/main.c **** 
 525:Core/Src/main.c **** 
 526:Core/Src/main.c **** /*
 527:Core/Src/main.c **** void ADC_Init(void){
 528:Core/Src/main.c ****   RCC->AHB1ENR |= (1<<0); //activate AHB bus for PORT A
 529:Core/Src/main.c ****   GPIOA->MODER |= (3<<0); // Pin 0 as analog
 530:Core/Src/main.c **** 
 531:Core/Src/main.c ****   RCC->APB2ENR |= (1<<8); // Enable clock source for ADC1
 532:Core/Src/main.c ****   ADC1->CR1 |= (1 << 24); // set 10 bit ADC
 533:Core/Src/main.c ****   ADC1->CR1 &= ~(1 <<25); // set 10 bit ADC
 534:Core/Src/main.c **** 
 535:Core/Src/main.c ****   ADC1->CR2 &= ~(1<<0); // ADC Disable
 536:Core/Src/main.c ****   ADC1->SQR3 |= 0; // Enable ADC 0th channel
 537:Core/Src/main.c ****   ADC1->CR2 |= (1<<0); // ADC ON
 538:Core/Src/main.c **** 
 539:Core/Src/main.c **** }
 540:Core/Src/main.c **** 
 541:Core/Src/main.c **** void ADC_conversion(void){
 542:Core/Src/main.c ****   ADC1->CR2 |= (1<<30); // start ADC conversion
 543:Core/Src/main.c **** 
 544:Core/Src/main.c **** }
 545:Core/Src/main.c **** 
 546:Core/Src/main.c **** int ADC_read(void){
 547:Core/Src/main.c ****   while(!(ADC1->SR & (1<<1))){
 548:Core/Src/main.c ****     //wait for conversion
 549:Core/Src/main.c ****   }
 550:Core/Src/main.c ****   return (ADC1->DR);
 551:Core/Src/main.c **** }
 552:Core/Src/main.c **** */
 553:Core/Src/main.c **** 
 554:Core/Src/main.c **** /* USER CODE END 4 */
 555:Core/Src/main.c **** 
 556:Core/Src/main.c **** /**
 557:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 558:Core/Src/main.c ****   * @retval None
 559:Core/Src/main.c ****   */
 560:Core/Src/main.c **** void Error_Handler(void)
 561:Core/Src/main.c **** {
 180              		.loc 1 561 1 is_stmt 1 view -0
 181              		.cfi_startproc
 182              		@ Volatile: function does not return.
 183              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 14


 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 562:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 563:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 564:Core/Src/main.c ****   __disable_irq();
 186              		.loc 1 564 3 view .LVU46
 187              	.LBB8:
 188              	.LBI8:
 189              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 15


  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 16


 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 17


 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 18


 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 19


 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 20


 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 21


 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 22


 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 23


 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 24


 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 25


 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 26


 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 27


 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 28


 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 29


 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 30


 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 31


 190              		.loc 2 960 27 view .LVU47
 191              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 192              		.loc 2 962 3 view .LVU48
 193              		.syntax unified
 194              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 195 0000 72B6     		cpsid i
 196              	@ 0 "" 2
 197              		.thumb
 198              		.syntax unified
 199              	.L6:
 200              	.LBE9:
 201              	.LBE8:
 565:Core/Src/main.c ****   while (1)
 202              		.loc 1 565 3 discriminator 1 view .LVU49
 566:Core/Src/main.c ****   {
 567:Core/Src/main.c ****   }
 203              		.loc 1 567 3 discriminator 1 view .LVU50
 565:Core/Src/main.c ****   while (1)
 204              		.loc 1 565 9 discriminator 1 view .LVU51
 205 0002 FEE7     		b	.L6
 206              		.cfi_endproc
 207              	.LFE248:
 209              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 210              		.align	1
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 215              	MX_USART2_UART_Init:
 216              	.LFB245:
 426:Core/Src/main.c **** 
 217              		.loc 1 426 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 08B5     		push	{r3, lr}
 222              	.LCFI3:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 3, -8
 225              		.cfi_offset 14, -4
 435:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 226              		.loc 1 435 3 view .LVU53
 435:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 227              		.loc 1 435 19 is_stmt 0 view .LVU54
 228 0002 0A48     		ldr	r0, .L11
 229 0004 0A4B     		ldr	r3, .L11+4
 230 0006 0360     		str	r3, [r0]
 436:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 231              		.loc 1 436 3 is_stmt 1 view .LVU55
 436:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 232              		.loc 1 436 24 is_stmt 0 view .LVU56
 233 0008 4FF4E133 		mov	r3, #115200
 234 000c 4360     		str	r3, [r0, #4]
 437:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 235              		.loc 1 437 3 is_stmt 1 view .LVU57
 437:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 32


 236              		.loc 1 437 26 is_stmt 0 view .LVU58
 237 000e 0023     		movs	r3, #0
 238 0010 8360     		str	r3, [r0, #8]
 438:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 239              		.loc 1 438 3 is_stmt 1 view .LVU59
 438:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 240              		.loc 1 438 24 is_stmt 0 view .LVU60
 241 0012 C360     		str	r3, [r0, #12]
 439:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 242              		.loc 1 439 3 is_stmt 1 view .LVU61
 439:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 243              		.loc 1 439 22 is_stmt 0 view .LVU62
 244 0014 0361     		str	r3, [r0, #16]
 440:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 245              		.loc 1 440 3 is_stmt 1 view .LVU63
 440:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 246              		.loc 1 440 20 is_stmt 0 view .LVU64
 247 0016 0C22     		movs	r2, #12
 248 0018 4261     		str	r2, [r0, #20]
 441:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 249              		.loc 1 441 3 is_stmt 1 view .LVU65
 441:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 250              		.loc 1 441 25 is_stmt 0 view .LVU66
 251 001a 8361     		str	r3, [r0, #24]
 442:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 252              		.loc 1 442 3 is_stmt 1 view .LVU67
 442:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 253              		.loc 1 442 28 is_stmt 0 view .LVU68
 254 001c C361     		str	r3, [r0, #28]
 443:Core/Src/main.c ****   {
 255              		.loc 1 443 3 is_stmt 1 view .LVU69
 443:Core/Src/main.c ****   {
 256              		.loc 1 443 7 is_stmt 0 view .LVU70
 257 001e FFF7FEFF 		bl	HAL_UART_Init
 258              	.LVL3:
 443:Core/Src/main.c ****   {
 259              		.loc 1 443 6 view .LVU71
 260 0022 00B9     		cbnz	r0, .L10
 451:Core/Src/main.c **** 
 261              		.loc 1 451 1 view .LVU72
 262 0024 08BD     		pop	{r3, pc}
 263              	.L10:
 445:Core/Src/main.c ****   }
 264              		.loc 1 445 5 is_stmt 1 view .LVU73
 265 0026 FFF7FEFF 		bl	Error_Handler
 266              	.LVL4:
 267              	.L12:
 268 002a 00BF     		.align	2
 269              	.L11:
 270 002c 00000000 		.word	huart2
 271 0030 00440040 		.word	1073759232
 272              		.cfi_endproc
 273              	.LFE245:
 275              		.section	.text.MX_I2C1_Init,"ax",%progbits
 276              		.align	1
 277              		.syntax unified
 278              		.thumb
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 33


 279              		.thumb_func
 281              	MX_I2C1_Init:
 282              	.LFB244:
 392:Core/Src/main.c **** 
 283              		.loc 1 392 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287 0000 08B5     		push	{r3, lr}
 288              	.LCFI4:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 3, -8
 291              		.cfi_offset 14, -4
 401:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 292              		.loc 1 401 3 view .LVU75
 401:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 293              		.loc 1 401 18 is_stmt 0 view .LVU76
 294 0002 0A48     		ldr	r0, .L17
 295 0004 0A4B     		ldr	r3, .L17+4
 296 0006 0360     		str	r3, [r0]
 402:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 297              		.loc 1 402 3 is_stmt 1 view .LVU77
 402:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 298              		.loc 1 402 25 is_stmt 0 view .LVU78
 299 0008 0A4B     		ldr	r3, .L17+8
 300 000a 4360     		str	r3, [r0, #4]
 403:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 301              		.loc 1 403 3 is_stmt 1 view .LVU79
 403:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 302              		.loc 1 403 24 is_stmt 0 view .LVU80
 303 000c 0023     		movs	r3, #0
 304 000e 8360     		str	r3, [r0, #8]
 404:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 305              		.loc 1 404 3 is_stmt 1 view .LVU81
 404:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 306              		.loc 1 404 26 is_stmt 0 view .LVU82
 307 0010 C360     		str	r3, [r0, #12]
 405:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 308              		.loc 1 405 3 is_stmt 1 view .LVU83
 405:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 309              		.loc 1 405 29 is_stmt 0 view .LVU84
 310 0012 4FF48042 		mov	r2, #16384
 311 0016 0261     		str	r2, [r0, #16]
 406:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 312              		.loc 1 406 3 is_stmt 1 view .LVU85
 406:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 313              		.loc 1 406 30 is_stmt 0 view .LVU86
 314 0018 4361     		str	r3, [r0, #20]
 407:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 315              		.loc 1 407 3 is_stmt 1 view .LVU87
 407:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 316              		.loc 1 407 26 is_stmt 0 view .LVU88
 317 001a 8361     		str	r3, [r0, #24]
 408:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 318              		.loc 1 408 3 is_stmt 1 view .LVU89
 408:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 319              		.loc 1 408 30 is_stmt 0 view .LVU90
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 34


 320 001c C361     		str	r3, [r0, #28]
 409:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 321              		.loc 1 409 3 is_stmt 1 view .LVU91
 409:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 322              		.loc 1 409 28 is_stmt 0 view .LVU92
 323 001e 0362     		str	r3, [r0, #32]
 410:Core/Src/main.c ****   {
 324              		.loc 1 410 3 is_stmt 1 view .LVU93
 410:Core/Src/main.c ****   {
 325              		.loc 1 410 7 is_stmt 0 view .LVU94
 326 0020 FFF7FEFF 		bl	HAL_I2C_Init
 327              	.LVL5:
 410:Core/Src/main.c ****   {
 328              		.loc 1 410 6 view .LVU95
 329 0024 00B9     		cbnz	r0, .L16
 418:Core/Src/main.c **** 
 330              		.loc 1 418 1 view .LVU96
 331 0026 08BD     		pop	{r3, pc}
 332              	.L16:
 412:Core/Src/main.c ****   }
 333              		.loc 1 412 5 is_stmt 1 view .LVU97
 334 0028 FFF7FEFF 		bl	Error_Handler
 335              	.LVL6:
 336              	.L18:
 337              		.align	2
 338              	.L17:
 339 002c 00000000 		.word	hi2c1
 340 0030 00540040 		.word	1073763328
 341 0034 A0860100 		.word	100000
 342              		.cfi_endproc
 343              	.LFE244:
 345              		.section	.text.MX_SPI1_Init,"ax",%progbits
 346              		.align	1
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	MX_SPI1_Init:
 352              	.LFB247:
 492:Core/Src/main.c **** 
 353              		.loc 1 492 27 view -0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 08B5     		push	{r3, lr}
 358              	.LCFI5:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 3, -8
 361              		.cfi_offset 14, -4
 494:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 362              		.loc 1 494 3 view .LVU99
 494:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 363              		.loc 1 494 18 is_stmt 0 view .LVU100
 364 0002 0D48     		ldr	r0, .L23
 365 0004 0D4B     		ldr	r3, .L23+4
 366 0006 0360     		str	r3, [r0]
 495:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 367              		.loc 1 495 3 is_stmt 1 view .LVU101
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 35


 495:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 368              		.loc 1 495 19 is_stmt 0 view .LVU102
 369 0008 4FF48273 		mov	r3, #260
 370 000c 4360     		str	r3, [r0, #4]
 496:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 371              		.loc 1 496 3 is_stmt 1 view .LVU103
 496:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 372              		.loc 1 496 24 is_stmt 0 view .LVU104
 373 000e 0023     		movs	r3, #0
 374 0010 8360     		str	r3, [r0, #8]
 497:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 375              		.loc 1 497 3 is_stmt 1 view .LVU105
 497:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 376              		.loc 1 497 23 is_stmt 0 view .LVU106
 377 0012 C360     		str	r3, [r0, #12]
 498:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 378              		.loc 1 498 3 is_stmt 1 view .LVU107
 498:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 379              		.loc 1 498 26 is_stmt 0 view .LVU108
 380 0014 0361     		str	r3, [r0, #16]
 499:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 381              		.loc 1 499 3 is_stmt 1 view .LVU109
 499:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 382              		.loc 1 499 23 is_stmt 0 view .LVU110
 383 0016 4361     		str	r3, [r0, #20]
 500:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 384              		.loc 1 500 3 is_stmt 1 view .LVU111
 500:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 385              		.loc 1 500 18 is_stmt 0 view .LVU112
 386 0018 4FF40072 		mov	r2, #512
 387 001c 8261     		str	r2, [r0, #24]
 501:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 388              		.loc 1 501 3 is_stmt 1 view .LVU113
 501:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 389              		.loc 1 501 32 is_stmt 0 view .LVU114
 390 001e 1022     		movs	r2, #16
 391 0020 C261     		str	r2, [r0, #28]
 502:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 392              		.loc 1 502 3 is_stmt 1 view .LVU115
 502:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 393              		.loc 1 502 23 is_stmt 0 view .LVU116
 394 0022 0362     		str	r3, [r0, #32]
 503:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 395              		.loc 1 503 3 is_stmt 1 view .LVU117
 503:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 396              		.loc 1 503 21 is_stmt 0 view .LVU118
 397 0024 4362     		str	r3, [r0, #36]
 504:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 398              		.loc 1 504 3 is_stmt 1 view .LVU119
 504:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 399              		.loc 1 504 29 is_stmt 0 view .LVU120
 400 0026 8362     		str	r3, [r0, #40]
 505:Core/Src/main.c ****   if(HAL_SPI_Init(&hspi1) != HAL_OK)
 401              		.loc 1 505 3 is_stmt 1 view .LVU121
 505:Core/Src/main.c ****   if(HAL_SPI_Init(&hspi1) != HAL_OK)
 402              		.loc 1 505 28 is_stmt 0 view .LVU122
 403 0028 0A23     		movs	r3, #10
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 36


 404 002a C362     		str	r3, [r0, #44]
 506:Core/Src/main.c ****     Error_Handler();
 405              		.loc 1 506 3 is_stmt 1 view .LVU123
 506:Core/Src/main.c ****     Error_Handler();
 406              		.loc 1 506 6 is_stmt 0 view .LVU124
 407 002c FFF7FEFF 		bl	HAL_SPI_Init
 408              	.LVL7:
 506:Core/Src/main.c ****     Error_Handler();
 409              		.loc 1 506 5 view .LVU125
 410 0030 00B9     		cbnz	r0, .L22
 508:Core/Src/main.c **** 
 411              		.loc 1 508 1 view .LVU126
 412 0032 08BD     		pop	{r3, pc}
 413              	.L22:
 507:Core/Src/main.c **** }
 414              		.loc 1 507 5 is_stmt 1 view .LVU127
 415 0034 FFF7FEFF 		bl	Error_Handler
 416              	.LVL8:
 417              	.L24:
 418              		.align	2
 419              	.L23:
 420 0038 00000000 		.word	hspi1
 421 003c 00300140 		.word	1073819648
 422              		.cfi_endproc
 423              	.LFE247:
 425              		.section	.text.SystemClock_Config,"ax",%progbits
 426              		.align	1
 427              		.global	SystemClock_Config
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 432              	SystemClock_Config:
 433              	.LFB243:
 292:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 434              		.loc 1 292 1 view -0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 80
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438 0000 00B5     		push	{lr}
 439              	.LCFI6:
 440              		.cfi_def_cfa_offset 4
 441              		.cfi_offset 14, -4
 442 0002 95B0     		sub	sp, sp, #84
 443              	.LCFI7:
 444              		.cfi_def_cfa_offset 88
 293:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 445              		.loc 1 293 3 view .LVU129
 293:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 446              		.loc 1 293 22 is_stmt 0 view .LVU130
 447 0004 3422     		movs	r2, #52
 448 0006 0021     		movs	r1, #0
 449 0008 07A8     		add	r0, sp, #28
 450 000a FFF7FEFF 		bl	memset
 451              	.LVL9:
 294:Core/Src/main.c **** 
 452              		.loc 1 294 3 is_stmt 1 view .LVU131
 294:Core/Src/main.c **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 37


 453              		.loc 1 294 22 is_stmt 0 view .LVU132
 454 000e 0023     		movs	r3, #0
 455 0010 0293     		str	r3, [sp, #8]
 456 0012 0393     		str	r3, [sp, #12]
 457 0014 0493     		str	r3, [sp, #16]
 458 0016 0593     		str	r3, [sp, #20]
 459 0018 0693     		str	r3, [sp, #24]
 298:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 460              		.loc 1 298 3 is_stmt 1 view .LVU133
 461              	.LBB10:
 298:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 462              		.loc 1 298 3 view .LVU134
 463 001a 0093     		str	r3, [sp]
 298:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 464              		.loc 1 298 3 view .LVU135
 465 001c 1F4A     		ldr	r2, .L31
 466 001e 116C     		ldr	r1, [r2, #64]
 467 0020 41F08051 		orr	r1, r1, #268435456
 468 0024 1164     		str	r1, [r2, #64]
 298:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 469              		.loc 1 298 3 view .LVU136
 470 0026 126C     		ldr	r2, [r2, #64]
 471 0028 02F08052 		and	r2, r2, #268435456
 472 002c 0092     		str	r2, [sp]
 298:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 473              		.loc 1 298 3 view .LVU137
 474 002e 009A     		ldr	r2, [sp]
 475              	.LBE10:
 298:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 476              		.loc 1 298 3 view .LVU138
 299:Core/Src/main.c **** 
 477              		.loc 1 299 3 view .LVU139
 478              	.LBB11:
 299:Core/Src/main.c **** 
 479              		.loc 1 299 3 view .LVU140
 480 0030 0193     		str	r3, [sp, #4]
 299:Core/Src/main.c **** 
 481              		.loc 1 299 3 view .LVU141
 482 0032 1B49     		ldr	r1, .L31+4
 483 0034 0A68     		ldr	r2, [r1]
 484 0036 22F44042 		bic	r2, r2, #49152
 485 003a 42F48042 		orr	r2, r2, #16384
 486 003e 0A60     		str	r2, [r1]
 299:Core/Src/main.c **** 
 487              		.loc 1 299 3 view .LVU142
 488 0040 0A68     		ldr	r2, [r1]
 489 0042 02F44042 		and	r2, r2, #49152
 490 0046 0192     		str	r2, [sp, #4]
 299:Core/Src/main.c **** 
 491              		.loc 1 299 3 view .LVU143
 492 0048 019A     		ldr	r2, [sp, #4]
 493              	.LBE11:
 299:Core/Src/main.c **** 
 494              		.loc 1 299 3 view .LVU144
 304:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 495              		.loc 1 304 3 view .LVU145
 304:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 38


 496              		.loc 1 304 36 is_stmt 0 view .LVU146
 497 004a 0222     		movs	r2, #2
 498 004c 0792     		str	r2, [sp, #28]
 305:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 499              		.loc 1 305 3 is_stmt 1 view .LVU147
 305:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 500              		.loc 1 305 30 is_stmt 0 view .LVU148
 501 004e 0121     		movs	r1, #1
 502 0050 0A91     		str	r1, [sp, #40]
 306:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 503              		.loc 1 306 3 is_stmt 1 view .LVU149
 306:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 504              		.loc 1 306 41 is_stmt 0 view .LVU150
 505 0052 1021     		movs	r1, #16
 506 0054 0B91     		str	r1, [sp, #44]
 307:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 507              		.loc 1 307 3 is_stmt 1 view .LVU151
 307:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 508              		.loc 1 307 34 is_stmt 0 view .LVU152
 509 0056 0D92     		str	r2, [sp, #52]
 308:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 510              		.loc 1 308 3 is_stmt 1 view .LVU153
 308:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 511              		.loc 1 308 35 is_stmt 0 view .LVU154
 512 0058 0E93     		str	r3, [sp, #56]
 309:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 513              		.loc 1 309 3 is_stmt 1 view .LVU155
 309:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 514              		.loc 1 309 30 is_stmt 0 view .LVU156
 515 005a 0F91     		str	r1, [sp, #60]
 310:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 516              		.loc 1 310 3 is_stmt 1 view .LVU157
 310:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 517              		.loc 1 310 30 is_stmt 0 view .LVU158
 518 005c 4FF4A873 		mov	r3, #336
 519 0060 1093     		str	r3, [sp, #64]
 311:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 520              		.loc 1 311 3 is_stmt 1 view .LVU159
 311:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 521              		.loc 1 311 30 is_stmt 0 view .LVU160
 522 0062 0423     		movs	r3, #4
 523 0064 1193     		str	r3, [sp, #68]
 312:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 524              		.loc 1 312 3 is_stmt 1 view .LVU161
 312:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 525              		.loc 1 312 30 is_stmt 0 view .LVU162
 526 0066 1292     		str	r2, [sp, #72]
 313:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 527              		.loc 1 313 3 is_stmt 1 view .LVU163
 313:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 528              		.loc 1 313 30 is_stmt 0 view .LVU164
 529 0068 1392     		str	r2, [sp, #76]
 314:Core/Src/main.c ****   {
 530              		.loc 1 314 3 is_stmt 1 view .LVU165
 314:Core/Src/main.c ****   {
 531              		.loc 1 314 7 is_stmt 0 view .LVU166
 532 006a 07A8     		add	r0, sp, #28
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 39


 533 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 534              	.LVL10:
 314:Core/Src/main.c ****   {
 535              		.loc 1 314 6 view .LVU167
 536 0070 80B9     		cbnz	r0, .L29
 321:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 537              		.loc 1 321 3 is_stmt 1 view .LVU168
 321:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 538              		.loc 1 321 31 is_stmt 0 view .LVU169
 539 0072 0F23     		movs	r3, #15
 540 0074 0293     		str	r3, [sp, #8]
 323:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 541              		.loc 1 323 3 is_stmt 1 view .LVU170
 323:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 542              		.loc 1 323 34 is_stmt 0 view .LVU171
 543 0076 0221     		movs	r1, #2
 544 0078 0391     		str	r1, [sp, #12]
 324:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 545              		.loc 1 324 3 is_stmt 1 view .LVU172
 324:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 546              		.loc 1 324 35 is_stmt 0 view .LVU173
 547 007a 0023     		movs	r3, #0
 548 007c 0493     		str	r3, [sp, #16]
 325:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 549              		.loc 1 325 3 is_stmt 1 view .LVU174
 325:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 550              		.loc 1 325 36 is_stmt 0 view .LVU175
 551 007e 4FF48052 		mov	r2, #4096
 552 0082 0592     		str	r2, [sp, #20]
 326:Core/Src/main.c **** 
 553              		.loc 1 326 3 is_stmt 1 view .LVU176
 326:Core/Src/main.c **** 
 554              		.loc 1 326 36 is_stmt 0 view .LVU177
 555 0084 0693     		str	r3, [sp, #24]
 328:Core/Src/main.c ****   {
 556              		.loc 1 328 3 is_stmt 1 view .LVU178
 328:Core/Src/main.c ****   {
 557              		.loc 1 328 7 is_stmt 0 view .LVU179
 558 0086 02A8     		add	r0, sp, #8
 559 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 560              	.LVL11:
 328:Core/Src/main.c ****   {
 561              		.loc 1 328 6 view .LVU180
 562 008c 20B9     		cbnz	r0, .L30
 332:Core/Src/main.c **** 
 563              		.loc 1 332 1 view .LVU181
 564 008e 15B0     		add	sp, sp, #84
 565              	.LCFI8:
 566              		.cfi_remember_state
 567              		.cfi_def_cfa_offset 4
 568              		@ sp needed
 569 0090 5DF804FB 		ldr	pc, [sp], #4
 570              	.L29:
 571              	.LCFI9:
 572              		.cfi_restore_state
 316:Core/Src/main.c ****   }
 573              		.loc 1 316 5 is_stmt 1 view .LVU182
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 40


 574 0094 FFF7FEFF 		bl	Error_Handler
 575              	.LVL12:
 576              	.L30:
 330:Core/Src/main.c ****   }
 577              		.loc 1 330 5 view .LVU183
 578 0098 FFF7FEFF 		bl	Error_Handler
 579              	.LVL13:
 580              	.L32:
 581              		.align	2
 582              	.L31:
 583 009c 00380240 		.word	1073887232
 584 00a0 00700040 		.word	1073770496
 585              		.cfi_endproc
 586              	.LFE243:
 588              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 589              		.align	2
 590              	.LC0:
 591 0000 53746172 		.ascii	"Start!\015\012\000"
 591      74210D0A 
 591      00
 592 0009 000000   		.align	2
 593              	.LC1:
 594 000c 25640D0A 		.ascii	"%d\015\012\000"
 594      00
 595 0011 000000   		.align	2
 596              	.LC2:
 597 0014 52656365 		.ascii	"Received Data\015\012\000"
 597      69766564 
 597      20446174 
 597      610D0A00 
 598              		.global	__aeabi_i2d
 599              		.global	__aeabi_ddiv
 600              		.global	__aeabi_d2f
 601              		.align	2
 602              	.LC3:
 603 0024 3C252E32 		.ascii	"<%.2f>\000"
 603      663E00
 604              		.global	__aeabi_f2d
 605 002b 00       		.align	2
 606              	.LC4:
 607 002c 4661696C 		.ascii	"Failed\015\012\000"
 607      65640D0A 
 607      00
 608              		.section	.text.main,"ax",%progbits
 609              		.align	1
 610              		.global	main
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 615              	main:
 616              	.LFB242:
 117:Core/Src/main.c **** 
 617              		.loc 1 117 1 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 72
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621 0000 30B5     		push	{r4, r5, lr}
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 41


 622              	.LCFI10:
 623              		.cfi_def_cfa_offset 12
 624              		.cfi_offset 4, -12
 625              		.cfi_offset 5, -8
 626              		.cfi_offset 14, -4
 627 0002 95B0     		sub	sp, sp, #84
 628              	.LCFI11:
 629              		.cfi_def_cfa_offset 96
 127:Core/Src/main.c **** 
 630              		.loc 1 127 3 view .LVU185
 631 0004 FFF7FEFF 		bl	HAL_Init
 632              	.LVL14:
 131:Core/Src/main.c ****   char str[32];
 633              		.loc 1 131 3 view .LVU186
 132:Core/Src/main.c ****   uint32_t analog_value;
 634              		.loc 1 132 3 view .LVU187
 133:Core/Src/main.c ****   int size_len;
 635              		.loc 1 133 3 view .LVU188
 134:Core/Src/main.c ****   uint16_t addr = 4;
 636              		.loc 1 134 3 view .LVU189
 135:Core/Src/main.c ****   HAL_StatusTypeDef ret;
 637              		.loc 1 135 3 view .LVU190
 136:Core/Src/main.c ****   uint16_t ADCData = 0;
 638              		.loc 1 136 3 view .LVU191
 137:Core/Src/main.c ****   uint8_t pinValue = 1;
 639              		.loc 1 137 3 view .LVU192
 138:Core/Src/main.c ****   
 640              		.loc 1 138 3 view .LVU193
 144:Core/Src/main.c **** 
 641              		.loc 1 144 3 view .LVU194
 642 0008 FFF7FEFF 		bl	SystemClock_Config
 643              	.LVL15:
 151:Core/Src/main.c ****   MX_USART2_UART_Init();
 644              		.loc 1 151 3 view .LVU195
 645 000c FFF7FEFF 		bl	MX_GPIO_Init
 646              	.LVL16:
 152:Core/Src/main.c ****   MX_I2C1_Init();
 647              		.loc 1 152 3 view .LVU196
 648 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 649              	.LVL17:
 153:Core/Src/main.c ****   //MX_ADC1_Init();
 650              		.loc 1 153 3 view .LVU197
 651 0014 FFF7FEFF 		bl	MX_I2C1_Init
 652              	.LVL18:
 155:Core/Src/main.c ****   ADC_Init(pinValue);
 653              		.loc 1 155 3 view .LVU198
 654 0018 FFF7FEFF 		bl	MX_SPI1_Init
 655              	.LVL19:
 156:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 656              		.loc 1 156 3 view .LVU199
 657 001c 0120     		movs	r0, #1
 658 001e FFF7FEFF 		bl	ADC_Init
 659              	.LVL20:
 159:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 660              		.loc 1 159 3 view .LVU200
 661 0022 3C4A     		ldr	r2, .L39
 662 0024 11AB     		add	r3, sp, #68
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 42


 663 0026 07CA     		ldm	r2, {r0, r1, r2}
 664 0028 03C3     		stmia	r3!, {r0, r1}
 665 002a 1A70     		strb	r2, [r3]
 160:Core/Src/main.c ****   //strcpy((char*)buf, "Hello!\r\n");
 666              		.loc 1 160 3 view .LVU201
 160:Core/Src/main.c ****   //strcpy((char*)buf, "Hello!\r\n");
 667              		.loc 1 160 35 is_stmt 0 view .LVU202
 668 002c 11A8     		add	r0, sp, #68
 669 002e FFF7FEFF 		bl	strlen
 670              	.LVL21:
 160:Core/Src/main.c ****   //strcpy((char*)buf, "Hello!\r\n");
 671              		.loc 1 160 3 view .LVU203
 672 0032 4FF0FF33 		mov	r3, #-1
 673 0036 82B2     		uxth	r2, r0
 674 0038 11A9     		add	r1, sp, #68
 675 003a 3748     		ldr	r0, .L39+4
 676 003c FFF7FEFF 		bl	HAL_UART_Transmit
 677              	.LVL22:
 678 0040 38E0     		b	.L36
 679              	.LVL23:
 680              	.L38:
 681              	.LBB12:
 682              	.LBB13:
 266:Core/Src/main.c ****       strcpy((char*)serialbuf, "Received Data\r\n");
 683              		.loc 1 266 7 is_stmt 1 view .LVU204
 684 0042 0023     		movs	r3, #0
 685 0044 8DF82C30 		strb	r3, [sp, #44]
 267:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 686              		.loc 1 267 7 view .LVU205
 687 0048 0BAC     		add	r4, sp, #44
 688 004a 344B     		ldr	r3, .L39+8
 689 004c 0FCB     		ldm	r3, {r0, r1, r2, r3}
 690              	.LVL24:
 267:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 691              		.loc 1 267 7 is_stmt 0 view .LVU206
 692 004e 84E80F00 		stm	r4, {r0, r1, r2, r3}
 268:Core/Src/main.c ****       uint16_t raw_lux = (i2c_buf[0] << 8 | i2c_buf[1]);
 693              		.loc 1 268 7 is_stmt 1 view .LVU207
 268:Core/Src/main.c ****       uint16_t raw_lux = (i2c_buf[0] << 8 | i2c_buf[1]);
 694              		.loc 1 268 45 is_stmt 0 view .LVU208
 695 0052 2046     		mov	r0, r4
 696 0054 FFF7FEFF 		bl	strlen
 697              	.LVL25:
 268:Core/Src/main.c ****       uint16_t raw_lux = (i2c_buf[0] << 8 | i2c_buf[1]);
 698              		.loc 1 268 7 view .LVU209
 699 0058 2F4D     		ldr	r5, .L39+4
 700 005a 4FF0FF33 		mov	r3, #-1
 701 005e 82B2     		uxth	r2, r0
 702 0060 2146     		mov	r1, r4
 703 0062 2846     		mov	r0, r5
 704 0064 FFF7FEFF 		bl	HAL_UART_Transmit
 705              	.LVL26:
 269:Core/Src/main.c ****       float lux = raw_lux/1.2;
 706              		.loc 1 269 7 is_stmt 1 view .LVU210
 269:Core/Src/main.c ****       float lux = raw_lux/1.2;
 707              		.loc 1 269 34 is_stmt 0 view .LVU211
 708 0068 9DF84000 		ldrb	r0, [sp, #64]	@ zero_extendqisi2
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 43


 269:Core/Src/main.c ****       float lux = raw_lux/1.2;
 709              		.loc 1 269 52 view .LVU212
 710 006c 9DF84130 		ldrb	r3, [sp, #65]	@ zero_extendqisi2
 711              	.LVL27:
 270:Core/Src/main.c ****       sprintf(str, sizeof(str), "<%.2f>", lux);
 712              		.loc 1 270 7 is_stmt 1 view .LVU213
 270:Core/Src/main.c ****       sprintf(str, sizeof(str), "<%.2f>", lux);
 713              		.loc 1 270 26 is_stmt 0 view .LVU214
 714 0070 43EA0020 		orr	r0, r3, r0, lsl #8
 715              	.LVL28:
 270:Core/Src/main.c ****       sprintf(str, sizeof(str), "<%.2f>", lux);
 716              		.loc 1 270 26 view .LVU215
 717 0074 FFF7FEFF 		bl	__aeabi_i2d
 718              	.LVL29:
 270:Core/Src/main.c ****       sprintf(str, sizeof(str), "<%.2f>", lux);
 719              		.loc 1 270 26 view .LVU216
 720 0078 4FF03332 		mov	r2, #858993459
 721 007c 284B     		ldr	r3, .L39+12
 722 007e FFF7FEFF 		bl	__aeabi_ddiv
 723              	.LVL30:
 270:Core/Src/main.c ****       sprintf(str, sizeof(str), "<%.2f>", lux);
 724              		.loc 1 270 13 view .LVU217
 725 0082 FFF7FEFF 		bl	__aeabi_d2f
 726              	.LVL31:
 271:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 727              		.loc 1 271 7 is_stmt 1 view .LVU218
 728 0086 FFF7FEFF 		bl	__aeabi_f2d
 729              	.LVL32:
 271:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 730              		.loc 1 271 7 is_stmt 0 view .LVU219
 731 008a CDE90001 		strd	r0, [sp]
 732 008e 254A     		ldr	r2, .L39+16
 733 0090 2021     		movs	r1, #32
 734 0092 03A8     		add	r0, sp, #12
 735 0094 FFF7FEFF 		bl	sprintf
 736              	.LVL33:
 272:Core/Src/main.c ****     }else{
 737              		.loc 1 272 7 is_stmt 1 view .LVU220
 272:Core/Src/main.c ****     }else{
 738              		.loc 1 272 49 is_stmt 0 view .LVU221
 739 0098 03A8     		add	r0, sp, #12
 740 009a FFF7FEFF 		bl	strlen
 741              	.LVL34:
 272:Core/Src/main.c ****     }else{
 742              		.loc 1 272 7 view .LVU222
 743 009e 4FF0FF33 		mov	r3, #-1
 744 00a2 82B2     		uxth	r2, r0
 745 00a4 03A9     		add	r1, sp, #12
 746 00a6 2846     		mov	r0, r5
 747 00a8 FFF7FEFF 		bl	HAL_UART_Transmit
 748              	.LVL35:
 749              	.L35:
 272:Core/Src/main.c ****     }else{
 750              		.loc 1 272 7 view .LVU223
 751              	.LBE13:
 278:Core/Src/main.c ****     
 752              		.loc 1 278 5 is_stmt 1 view .LVU224
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 44


 753 00ac 4FF47A70 		mov	r0, #1000
 754 00b0 FFF7FEFF 		bl	HAL_Delay
 755              	.LVL36:
 756              	.LBE12:
 204:Core/Src/main.c ****   {
 757              		.loc 1 204 9 view .LVU225
 758              	.L36:
 204:Core/Src/main.c ****   {
 759              		.loc 1 204 3 view .LVU226
 760              	.LBB14:
 206:Core/Src/main.c ****     
 761              		.loc 1 206 5 view .LVU227
 762 00b4 FFF7FEFF 		bl	ADC_conversion
 763              	.LVL37:
 209:Core/Src/main.c **** 
 764              		.loc 1 209 5 view .LVU228
 209:Core/Src/main.c **** 
 765              		.loc 1 209 15 is_stmt 0 view .LVU229
 766 00b8 FFF7FEFF 		bl	ADC_read
 767              	.LVL38:
 212:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 768              		.loc 1 212 5 is_stmt 1 view .LVU230
 212:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 769              		.loc 1 212 16 is_stmt 0 view .LVU231
 770 00bc 82B2     		uxth	r2, r0
 771 00be 1A49     		ldr	r1, .L39+20
 772 00c0 03A8     		add	r0, sp, #12
 773              	.LVL39:
 212:Core/Src/main.c ****     HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 774              		.loc 1 212 16 view .LVU232
 775 00c2 FFF7FEFF 		bl	sprintf
 776              	.LVL40:
 213:Core/Src/main.c **** 
 777              		.loc 1 213 5 is_stmt 1 view .LVU233
 778 00c6 4FF0FF33 		mov	r3, #-1
 779 00ca 82B2     		uxth	r2, r0
 780 00cc 03A9     		add	r1, sp, #12
 781 00ce 1248     		ldr	r0, .L39+4
 782              	.LVL41:
 213:Core/Src/main.c **** 
 783              		.loc 1 213 5 is_stmt 0 view .LVU234
 784 00d0 FFF7FEFF 		bl	HAL_UART_Transmit
 785              	.LVL42:
 260:Core/Src/main.c ****     ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)0b01000111, i2c_buf, 2, 200);
 786              		.loc 1 260 5 is_stmt 1 view .LVU235
 787 00d4 0023     		movs	r3, #0
 788 00d6 8DF84030 		strb	r3, [sp, #64]
 261:Core/Src/main.c ****     if(ret == HAL_OK){      
 789              		.loc 1 261 5 view .LVU236
 261:Core/Src/main.c ****     if(ret == HAL_OK){      
 790              		.loc 1 261 11 is_stmt 0 view .LVU237
 791 00da C823     		movs	r3, #200
 792 00dc 0093     		str	r3, [sp]
 793 00de 0223     		movs	r3, #2
 794 00e0 10AA     		add	r2, sp, #64
 795 00e2 4721     		movs	r1, #71
 796 00e4 1148     		ldr	r0, .L39+24
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 45


 797 00e6 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 798              	.LVL43:
 262:Core/Src/main.c ****       //size_len = sprintf(str, "%lu\r\n", i2c_buf);
 799              		.loc 1 262 5 is_stmt 1 view .LVU238
 262:Core/Src/main.c ****       //size_len = sprintf(str, "%lu\r\n", i2c_buf);
 800              		.loc 1 262 7 is_stmt 0 view .LVU239
 801 00ea 0028     		cmp	r0, #0
 802 00ec A9D0     		beq	.L38
 274:Core/Src/main.c ****         strcpy((char*)serialbuf, "Failed\r\n");
 803              		.loc 1 274 9 is_stmt 1 view .LVU240
 804 00ee 0023     		movs	r3, #0
 805 00f0 8DF82C30 		strb	r3, [sp, #44]
 275:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 806              		.loc 1 275 9 view .LVU241
 807 00f4 0E4A     		ldr	r2, .L39+28
 808 00f6 0BAB     		add	r3, sp, #44
 809 00f8 07CA     		ldm	r2, {r0, r1, r2}
 810              	.LVL44:
 275:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 811              		.loc 1 275 9 is_stmt 0 view .LVU242
 812 00fa 03C3     		stmia	r3!, {r0, r1}
 813 00fc 1A70     		strb	r2, [r3]
 276:Core/Src/main.c ****     }
 814              		.loc 1 276 9 is_stmt 1 view .LVU243
 276:Core/Src/main.c ****     }
 815              		.loc 1 276 47 is_stmt 0 view .LVU244
 816 00fe 0BA8     		add	r0, sp, #44
 817 0100 FFF7FEFF 		bl	strlen
 818              	.LVL45:
 276:Core/Src/main.c ****     }
 819              		.loc 1 276 9 view .LVU245
 820 0104 4FF0FF33 		mov	r3, #-1
 821 0108 82B2     		uxth	r2, r0
 822 010a 0BA9     		add	r1, sp, #44
 823 010c 0248     		ldr	r0, .L39+4
 824 010e FFF7FEFF 		bl	HAL_UART_Transmit
 825              	.LVL46:
 826 0112 CBE7     		b	.L35
 827              	.L40:
 828              		.align	2
 829              	.L39:
 830 0114 00000000 		.word	.LC0
 831 0118 00000000 		.word	huart2
 832 011c 14000000 		.word	.LC2
 833 0120 3333F33F 		.word	1072902963
 834 0124 24000000 		.word	.LC3
 835 0128 0C000000 		.word	.LC1
 836 012c 00000000 		.word	hi2c1
 837 0130 2C000000 		.word	.LC4
 838              	.LBE14:
 839              		.cfi_endproc
 840              	.LFE242:
 842              		.global	buff
 843              		.section	.bss.buff,"aw",%nobits
 844              		.align	2
 847              	buff:
 848 0000 0000     		.space	2
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 46


 849              		.global	hspi1
 850              		.section	.bss.hspi1,"aw",%nobits
 851              		.align	2
 854              	hspi1:
 855 0000 00000000 		.space	88
 855      00000000 
 855      00000000 
 855      00000000 
 855      00000000 
 856              		.global	huart2
 857              		.section	.bss.huart2,"aw",%nobits
 858              		.align	2
 861              	huart2:
 862 0000 00000000 		.space	72
 862      00000000 
 862      00000000 
 862      00000000 
 862      00000000 
 863              		.global	hi2c1
 864              		.section	.bss.hi2c1,"aw",%nobits
 865              		.align	2
 868              	hi2c1:
 869 0000 00000000 		.space	84
 869      00000000 
 869      00000000 
 869      00000000 
 869      00000000 
 870              		.global	hadc1
 871              		.section	.bss.hadc1,"aw",%nobits
 872              		.align	2
 875              	hadc1:
 876 0000 00000000 		.space	72
 876      00000000 
 876      00000000 
 876      00000000 
 876      00000000 
 877              		.text
 878              	.Letext0:
 879              		.file 3 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 880              		.file 4 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 881              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 882              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 883              		.file 7 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/inc
 884              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 885              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 886              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 887              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 888              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 889              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 890              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 891              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 892              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 893              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 894              		.file 18 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 895              		.file 19 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 896              		.file 20 "<built-in>"
ARM GAS  C:\Users\gabri\AppData\Local\Temp\ccJls81N.s 			page 47


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:165    .text.MX_GPIO_Init:0000009c $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:172    .text.Error_Handler:00000000 $t
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:178    .text.Error_Handler:00000000 Error_Handler
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:210    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:215    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:270    .text.MX_USART2_UART_Init:0000002c $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:861    .bss.huart2:00000000 huart2
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:276    .text.MX_I2C1_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:281    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:339    .text.MX_I2C1_Init:0000002c $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:868    .bss.hi2c1:00000000 hi2c1
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:346    .text.MX_SPI1_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:351    .text.MX_SPI1_Init:00000000 MX_SPI1_Init
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:420    .text.MX_SPI1_Init:00000038 $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:854    .bss.hspi1:00000000 hspi1
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:426    .text.SystemClock_Config:00000000 $t
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:432    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:583    .text.SystemClock_Config:0000009c $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:589    .rodata.main.str1.4:00000000 $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:609    .text.main:00000000 $t
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:615    .text.main:00000000 main
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:830    .text.main:00000114 $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:847    .bss.buff:00000000 buff
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:844    .bss.buff:00000000 $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:851    .bss.hspi1:00000000 $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:858    .bss.huart2:00000000 $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:865    .bss.hi2c1:00000000 $d
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:875    .bss.hadc1:00000000 hadc1
C:\Users\gabri\AppData\Local\Temp\ccJls81N.s:872    .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_I2C_Init
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2f
__aeabi_f2d
HAL_Init
ADC_Init
strlen
HAL_UART_Transmit
sprintf
HAL_Delay
ADC_conversion
ADC_read
HAL_I2C_Master_Receive
