ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB247:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** #include <string.h>
  26:Core/Src/main.c **** #include <stdio.h>
  27:Core/Src/main.c **** /* USER CODE END Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  30:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PD */
  36:Core/Src/main.c **** //Device Address
  37:Core/Src/main.c **** //Please note that arduino uses 7 bit addresses, STM32 uses 8
  38:Core/Src/main.c **** #define BH1750_NO_GROUND_ADDR_WRITE     (0xB9 + 0)
  39:Core/Src/main.c **** #define BH1750_NO_GROUND_ADDR_READ      (0xB9 + 1)
  40:Core/Src/main.c **** #define BH1750_GROUND_ADDR_WRITE        (0x46 + 0)
  41:Core/Src/main.c **** #define BH1750_GROUND_ADDR_READ         (0x46 + 1)
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** //instructions
  44:Core/Src/main.c **** //datasheet ref http://cpre.kmutnb.ac.th/esl/learning/bh1750-light-sensor/bh1750fvi-e_datasheet.pdf
  45:Core/Src/main.c **** #define CMD_POWER_DOWN          0x00
  46:Core/Src/main.c **** #define CMD_POWER_ON            0x01
  47:Core/Src/main.c **** #define CMD_RESET               0x03
  48:Core/Src/main.c **** #define CMD_H_RES_MODE          0x10
  49:Core/Src/main.c **** #define CMD_H_RES_MODE2         0x11
  50:Core/Src/main.c **** #define CMD_L_RES_MODE          0x13
  51:Core/Src/main.c **** #define CMD_ONE_H_RES_MODE      0x20
  52:Core/Src/main.c **** #define CMD_ONE_H_RES_MODE2     0x21
  53:Core/Src/main.c **** #define CMD_ONE_L_RES_MODE      0x23
  54:Core/Src/main.c **** #define CMD_CNG_TIME_HIGH       0x30    // 3 LSB set time
  55:Core/Src/main.c **** #define CMD_CNG_TIME_LOW        0x60    // 5 LSB set time
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** #ifndef bool
  58:Core/Src/main.c **** #define bool    uint8_t
  59:Core/Src/main.c **** #endif
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** #ifndef true
  62:Core/Src/main.c **** #define true    1
  63:Core/Src/main.c **** #endif
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** #ifndef false
  66:Core/Src/main.c **** #define false   0
  67:Core/Src/main.c **** #endif
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* USER CODE END PD */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  72:Core/Src/main.c **** /* USER CODE BEGIN PM */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** /* USER CODE END PM */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  77:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** UART_HandleTypeDef huart2;
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /* USER CODE BEGIN PV */
  86:Core/Src/main.c **** static const uint16_t BH1750_ADDR = 0x23;
  87:Core/Src/main.c **** uint8_t buff[2];
  88:Core/Src/main.c **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 3


  89:Core/Src/main.c **** /* USER CODE END PV */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  92:Core/Src/main.c **** void SystemClock_Config(void);
  93:Core/Src/main.c **** static void MX_GPIO_Init(void);
  94:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  95:Core/Src/main.c **** static void MX_I2C1_Init(void);
  96:Core/Src/main.c **** static void MX_ADC1_Init(void);
  97:Core/Src/main.c **** static void MX_SPI1_Init(void);
  98:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /* USER CODE END PFP */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 103:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c **** /* USER CODE END 0 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c **** /**
 108:Core/Src/main.c ****   * @brief  The application entry point.
 109:Core/Src/main.c ****   * @retval int
 110:Core/Src/main.c ****   */
 111:Core/Src/main.c **** int main(void)
 112:Core/Src/main.c **** {
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* USER CODE END 1 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 121:Core/Src/main.c ****   HAL_Init();
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   uint8_t buf[12], i2c_buf[2], serialbuf[20];
 126:Core/Src/main.c ****   char str[32];
 127:Core/Src/main.c ****   uint32_t analog_value;
 128:Core/Src/main.c ****   int size_len;
 129:Core/Src/main.c ****   uint16_t addr = 4;
 130:Core/Src/main.c ****   HAL_StatusTypeDef ret;
 131:Core/Src/main.c ****   
 132:Core/Src/main.c ****   //uint32_t analog_value;
 133:Core/Src/main.c ****   /* USER CODE END Init */
 134:Core/Src/main.c **** 
 135:Core/Src/main.c ****   /* Configure the system clock */
 136:Core/Src/main.c ****   SystemClock_Config();
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* USER CODE END SysInit */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /* Initialize all configured peripherals */
 143:Core/Src/main.c ****   MX_GPIO_Init();
 144:Core/Src/main.c ****   MX_USART2_UART_Init();
 145:Core/Src/main.c ****   MX_I2C1_Init();
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 4


 146:Core/Src/main.c ****   MX_ADC1_Init();
 147:Core/Src/main.c ****   MX_SPI1_Init();
 148:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   strcpy((char*)buf, "Start!\r\n");
 151:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 152:Core/Src/main.c ****   //strcpy((char*)buf, "Hello!\r\n");
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   i2c_buf[0] = 0b00010000;
 155:Core/Src/main.c ****   /*ret = HAL_I2C_Master_Transmit(&hi2c1, BH1750_GROUND_ADDR_WRITE, i2c_buf, 1, 200);
 156:Core/Src/main.c ****   if(ret == HAL_OK){ 
 157:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 158:Core/Src/main.c ****       strcpy((char*)serialbuf, "Power ON\r\n");
 159:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 160:Core/Src/main.c ****   }else{
 161:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 162:Core/Src/main.c ****       strcpy((char*)serialbuf, "Error Power\r\n");
 163:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 164:Core/Src/main.c ****   }*/
 165:Core/Src/main.c **** 
 166:Core/Src/main.c ****   /* USER CODE END 2 */
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****   /* Infinite loop */
 169:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 170:Core/Src/main.c ****   while (1)
 171:Core/Src/main.c ****   {
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****     //HAL_ADC_Start(&hadc1);
 174:Core/Src/main.c **** 	  //if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK){
 175:Core/Src/main.c **** 
 176:Core/Src/main.c **** 		  //analog_value = HAL_ADC_GetValue(&hadc1);
 177:Core/Src/main.c ****       //size_len = sprintf(str, "%lu\r\n", analog_value);
 178:Core/Src/main.c ****       //HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 179:Core/Src/main.c **** 	  //}
 180:Core/Src/main.c **** 	  //HAL_ADC_Stop(&hadc1);
 181:Core/Src/main.c **** 	  //HAL_Delay(1000);
 182:Core/Src/main.c **** 
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****     /*
 185:Core/Src/main.c **** 	  ret = BH1750_send_command(dev, CMD_RESET);
 186:Core/Src/main.c ****         if(ret == HAL_OK){ 
 187:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 188:Core/Src/main.c ****       strcpy((char*)serialbuf, "Reset\r\n");
 189:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 190:Core/Src/main.c ****       }else{
 191:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
 192:Core/Src/main.c ****         strcpy((char*)serialbuf, "Reset Fail\r\n");
 193:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 194:Core/Src/main.c ****       }
 195:Core/Src/main.c **** 
 196:Core/Src/main.c **** 	  ret = BH1750_send_command(dev, CMD_H_RES_MODE);
 197:Core/Src/main.c ****         if(ret == HAL_OK){ 
 198:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 199:Core/Src/main.c ****       strcpy((char*)serialbuf, "RES MODE ON\r\n");
 200:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 201:Core/Src/main.c ****       }else{
 202:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 5


 203:Core/Src/main.c ****         strcpy((char*)serialbuf, "RES MODE FAIL\r\n");
 204:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 205:Core/Src/main.c ****       }
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****     ret = HAL_I2C_Master_Transmit(&hi2c1, BH1750_ADDR, i2c_buf, 1, 200);
 208:Core/Src/main.c ****     if(ret != HAL_OK){
 209:Core/Src/main.c ****       strcpy((char*)serialbuf, "Error Rx\r\n");
 210:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 211:Core/Src/main.c ****     }*/
 212:Core/Src/main.c ****   
 213:Core/Src/main.c ****     //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 214:Core/Src/main.c ****     //HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 215:Core/Src/main.c ****     //HAL_Delay(500);
 216:Core/Src/main.c ****     
 217:Core/Src/main.c ****     ret = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)0b01000110, i2c_buf, 1, 200);
 218:Core/Src/main.c ****     if(ret == HAL_OK){      
 219:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 220:Core/Src/main.c ****       strcpy((char*)serialbuf, "Transmited\r\n");
 221:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 222:Core/Src/main.c ****     }else{
 223:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
 224:Core/Src/main.c ****         strcpy((char*)serialbuf, "Failed\r\n");
 225:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 226:Core/Src/main.c ****     }
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****     ret = HAL_I2C_Master_Receive(&hi2c1, (uint16_t)0b01000111, i2c_buf, 2, 200);
 229:Core/Src/main.c ****     if(ret == HAL_OK){      
 230:Core/Src/main.c ****       size_len = sprintf(str, "%lu\r\n", i2c_buf);
 231:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 232:Core/Src/main.c ****     }else{
 233:Core/Src/main.c ****         strcpy((char*)serialbuf, "");
 234:Core/Src/main.c ****         strcpy((char*)serialbuf, "Failed\r\n");
 235:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 236:Core/Src/main.c ****     }
 237:Core/Src/main.c ****     HAL_Delay(1000);
 238:Core/Src/main.c ****     
 239:Core/Src/main.c ****     /* USER CODE END WHILE */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 242:Core/Src/main.c ****   }
 243:Core/Src/main.c ****   /* USER CODE END 3 */
 244:Core/Src/main.c **** }
 245:Core/Src/main.c **** 
 246:Core/Src/main.c **** /**
 247:Core/Src/main.c ****   * @brief System Clock Configuration
 248:Core/Src/main.c ****   * @retval None
 249:Core/Src/main.c ****   */
 250:Core/Src/main.c **** void SystemClock_Config(void)
 251:Core/Src/main.c **** {
 252:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 253:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 256:Core/Src/main.c ****   */
 257:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 258:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 259:Core/Src/main.c **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 6


 260:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 261:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 262:Core/Src/main.c ****   */
 263:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 265:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 272:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 273:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 274:Core/Src/main.c ****   {
 275:Core/Src/main.c ****     Error_Handler();
 276:Core/Src/main.c ****   }
 277:Core/Src/main.c **** 
 278:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 279:Core/Src/main.c ****   */
 280:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 281:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 282:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 283:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 284:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 285:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 288:Core/Src/main.c ****   {
 289:Core/Src/main.c ****     Error_Handler();
 290:Core/Src/main.c ****   }
 291:Core/Src/main.c **** }
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** /**
 294:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 295:Core/Src/main.c ****   * @param None
 296:Core/Src/main.c ****   * @retval None
 297:Core/Src/main.c ****   */
 298:Core/Src/main.c **** static void MX_ADC1_Init(void)
 299:Core/Src/main.c **** {
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 308:Core/Src/main.c **** 
 309:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 312:Core/Src/main.c ****   */
 313:Core/Src/main.c ****   hadc1.Instance = ADC1;
 314:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 315:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 316:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 7


 317:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 318:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 319:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 320:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 321:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 322:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 323:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 324:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 325:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 326:Core/Src/main.c ****   {
 327:Core/Src/main.c ****     Error_Handler();
 328:Core/Src/main.c ****   }
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 331:Core/Src/main.c ****   */
 332:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_0;
 333:Core/Src/main.c ****   sConfig.Rank = 1;
 334:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 335:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 336:Core/Src/main.c ****   {
 337:Core/Src/main.c ****     Error_Handler();
 338:Core/Src/main.c ****   }
 339:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 340:Core/Src/main.c **** 
 341:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 342:Core/Src/main.c **** 
 343:Core/Src/main.c **** }
 344:Core/Src/main.c **** 
 345:Core/Src/main.c **** /**
 346:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 347:Core/Src/main.c ****   * @param None
 348:Core/Src/main.c ****   * @retval None
 349:Core/Src/main.c ****   */
 350:Core/Src/main.c **** static void MX_I2C1_Init(void)
 351:Core/Src/main.c **** {
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 360:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 361:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 362:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 363:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 364:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 365:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 366:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 367:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 368:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 369:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 370:Core/Src/main.c ****   {
 371:Core/Src/main.c ****     Error_Handler();
 372:Core/Src/main.c ****   }
 373:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 8


 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** }
 378:Core/Src/main.c **** 
 379:Core/Src/main.c **** /**
 380:Core/Src/main.c ****   * @brief USART2 Initialization Function
 381:Core/Src/main.c ****   * @param None
 382:Core/Src/main.c ****   * @retval None
 383:Core/Src/main.c ****   */
 384:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 385:Core/Src/main.c **** {
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 392:Core/Src/main.c **** 
 393:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 394:Core/Src/main.c ****   huart2.Instance = USART2;
 395:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 396:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 397:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 398:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 399:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 400:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 401:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 402:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 403:Core/Src/main.c ****   {
 404:Core/Src/main.c ****     Error_Handler();
 405:Core/Src/main.c ****   }
 406:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 409:Core/Src/main.c **** 
 410:Core/Src/main.c **** }
 411:Core/Src/main.c **** 
 412:Core/Src/main.c **** /**
 413:Core/Src/main.c ****   * @brief GPIO Initialization Function
 414:Core/Src/main.c ****   * @param None
 415:Core/Src/main.c ****   * @retval None
 416:Core/Src/main.c ****   */
 417:Core/Src/main.c **** static void MX_GPIO_Init(void)
 418:Core/Src/main.c **** {
  28              		.loc 1 418 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 30B5     		push	{r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 12
  35              		.cfi_offset 4, -12
  36              		.cfi_offset 5, -8
  37              		.cfi_offset 14, -4
  38 0002 8BB0     		sub	sp, sp, #44
  39              	.LCFI1:
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 9


  40              		.cfi_def_cfa_offset 56
 419:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 419 3 view .LVU1
  42              		.loc 1 419 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 420:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 421:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 422:Core/Src/main.c **** 
 423:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 424:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 424 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 424 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 424 3 view .LVU5
  54 0012 224B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 424 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 424 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 424 3 view .LVU8
 425:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 425 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 425 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 425 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 425 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 425 3 view .LVU13
  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 425 3 view .LVU14
 426:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 426 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 426 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 426 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 10


  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 426 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 426 3 view .LVU19
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 426 3 view .LVU20
 427:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 427 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 427 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 427 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 427 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 427 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 427 3 view .LVU26
 428:Core/Src/main.c **** 
 429:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 430:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 114              		.loc 1 430 3 view .LVU27
 115 0062 0F4D     		ldr	r5, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 2021     		movs	r1, #32
 118 0068 2846     		mov	r0, r5
 119 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 433:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 121              		.loc 1 433 3 view .LVU28
 122              		.loc 1 433 23 is_stmt 0 view .LVU29
 123 006e 4FF40053 		mov	r3, #8192
 124 0072 0593     		str	r3, [sp, #20]
 434:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 125              		.loc 1 434 3 is_stmt 1 view .LVU30
 126              		.loc 1 434 24 is_stmt 0 view .LVU31
 127 0074 4FF40413 		mov	r3, #2162688
 128 0078 0693     		str	r3, [sp, #24]
 435:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 435 3 is_stmt 1 view .LVU32
 130              		.loc 1 435 24 is_stmt 0 view .LVU33
 131 007a 0794     		str	r4, [sp, #28]
 436:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 132              		.loc 1 436 3 is_stmt 1 view .LVU34
 133 007c 05A9     		add	r1, sp, #20
 134 007e 0948     		ldr	r0, .L3+8
 135 0080 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 11


 136              	.LVL1:
 437:Core/Src/main.c **** 
 438:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 439:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 137              		.loc 1 439 3 view .LVU35
 138              		.loc 1 439 23 is_stmt 0 view .LVU36
 139 0084 2023     		movs	r3, #32
 140 0086 0593     		str	r3, [sp, #20]
 440:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 141              		.loc 1 440 3 is_stmt 1 view .LVU37
 142              		.loc 1 440 24 is_stmt 0 view .LVU38
 143 0088 0123     		movs	r3, #1
 144 008a 0693     		str	r3, [sp, #24]
 441:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 441 3 is_stmt 1 view .LVU39
 146              		.loc 1 441 24 is_stmt 0 view .LVU40
 147 008c 0794     		str	r4, [sp, #28]
 442:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 148              		.loc 1 442 3 is_stmt 1 view .LVU41
 149              		.loc 1 442 25 is_stmt 0 view .LVU42
 150 008e 0894     		str	r4, [sp, #32]
 443:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 151              		.loc 1 443 3 is_stmt 1 view .LVU43
 152 0090 05A9     		add	r1, sp, #20
 153 0092 2846     		mov	r0, r5
 154 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 155              	.LVL2:
 444:Core/Src/main.c **** 
 445:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 446:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 447:Core/Src/main.c **** }
 156              		.loc 1 447 1 is_stmt 0 view .LVU44
 157 0098 0BB0     		add	sp, sp, #44
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 12
 160              		@ sp needed
 161 009a 30BD     		pop	{r4, r5, pc}
 162              	.L4:
 163              		.align	2
 164              	.L3:
 165 009c 00380240 		.word	1073887232
 166 00a0 00000240 		.word	1073872896
 167 00a4 00080240 		.word	1073874944
 168              		.cfi_endproc
 169              	.LFE247:
 171              		.section	.text.Error_Handler,"ax",%progbits
 172              		.align	1
 173              		.global	Error_Handler
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 178              	Error_Handler:
 179              	.LFB249:
 448:Core/Src/main.c **** 
 449:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 450:Core/Src/main.c **** 
 451:Core/Src/main.c **** static void MX_SPI1_Init(){
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 12


 452:Core/Src/main.c **** 
 453:Core/Src/main.c ****   hspi1.Instance = SPI1;
 454:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 455:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 456:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 457:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 458:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 459:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 460:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 461:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 462:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 463:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 464:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 465:Core/Src/main.c ****   if(HAL_SPI_Init(&hspi1) != HAL_OK)
 466:Core/Src/main.c ****     Error_Handler();
 467:Core/Src/main.c **** }
 468:Core/Src/main.c **** 
 469:Core/Src/main.c **** /* START OF BH1750 COMMUNICATION FUNCTIONS*/
 470:Core/Src/main.c **** /*HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
 471:Core/Src/main.c **** {
 472:Core/Src/main.c **** 	//TODO hal checks
 473:Core/Src/main.c **** 	if(HAL_I2C_Master_Transmit(
 474:Core/Src/main.c **** 			dev->i2c_handle,	//I2C Handle
 475:Core/Src/main.c **** 			dev->address_w,		//I2C addr of dev
 476:Core/Src/main.c **** 			&cmd,				//CMD to be executed
 477:Core/Src/main.c **** 			1,					//8bit addr
 478:Core/Src/main.c **** 			10					//Wait time
 479:Core/Src/main.c **** 		) != HAL_OK) return HAL_ERROR;
 480:Core/Src/main.c **** 
 481:Core/Src/main.c **** 	return HAL_OK;
 482:Core/Src/main.c **** }*/
 483:Core/Src/main.c **** 
 484:Core/Src/main.c **** /* USER CODE END 4 */
 485:Core/Src/main.c **** 
 486:Core/Src/main.c **** /**
 487:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 488:Core/Src/main.c ****   * @retval None
 489:Core/Src/main.c ****   */
 490:Core/Src/main.c **** void Error_Handler(void)
 491:Core/Src/main.c **** {
 180              		.loc 1 491 1 is_stmt 1 view -0
 181              		.cfi_startproc
 182              		@ Volatile: function does not return.
 183              		@ args = 0, pretend = 0, frame = 0
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              		@ link register save eliminated.
 492:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 493:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 494:Core/Src/main.c ****   __disable_irq();
 186              		.loc 1 494 3 view .LVU46
 187              	.LBB8:
 188              	.LBI8:
 189              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 13


   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 14


  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 15


 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 16


 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 17


 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 18


 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 19


 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 20


 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 21


 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 22


 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 23


 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 24


 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 25


 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 26


 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 27


 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 28


 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 29


 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 190              		.loc 2 960 27 view .LVU47
 191              	.LBB9:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 192              		.loc 2 962 3 view .LVU48
 193              		.syntax unified
 194              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 195 0000 72B6     		cpsid i
 196              	@ 0 "" 2
 197              		.thumb
 198              		.syntax unified
 199              	.L6:
 200              	.LBE9:
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 30


 201              	.LBE8:
 495:Core/Src/main.c ****   while (1)
 202              		.loc 1 495 3 discriminator 1 view .LVU49
 496:Core/Src/main.c ****   {
 497:Core/Src/main.c ****   }
 203              		.loc 1 497 3 discriminator 1 view .LVU50
 495:Core/Src/main.c ****   while (1)
 204              		.loc 1 495 9 discriminator 1 view .LVU51
 205 0002 FEE7     		b	.L6
 206              		.cfi_endproc
 207              	.LFE249:
 209              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 210              		.align	1
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 215              	MX_USART2_UART_Init:
 216              	.LFB246:
 385:Core/Src/main.c **** 
 217              		.loc 1 385 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 08B5     		push	{r3, lr}
 222              	.LCFI3:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 3, -8
 225              		.cfi_offset 14, -4
 394:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 226              		.loc 1 394 3 view .LVU53
 394:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 227              		.loc 1 394 19 is_stmt 0 view .LVU54
 228 0002 0A48     		ldr	r0, .L11
 229 0004 0A4B     		ldr	r3, .L11+4
 230 0006 0360     		str	r3, [r0]
 395:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 231              		.loc 1 395 3 is_stmt 1 view .LVU55
 395:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 232              		.loc 1 395 24 is_stmt 0 view .LVU56
 233 0008 4FF4E133 		mov	r3, #115200
 234 000c 4360     		str	r3, [r0, #4]
 396:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 235              		.loc 1 396 3 is_stmt 1 view .LVU57
 396:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 236              		.loc 1 396 26 is_stmt 0 view .LVU58
 237 000e 0023     		movs	r3, #0
 238 0010 8360     		str	r3, [r0, #8]
 397:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 239              		.loc 1 397 3 is_stmt 1 view .LVU59
 397:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 240              		.loc 1 397 24 is_stmt 0 view .LVU60
 241 0012 C360     		str	r3, [r0, #12]
 398:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 242              		.loc 1 398 3 is_stmt 1 view .LVU61
 398:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 243              		.loc 1 398 22 is_stmt 0 view .LVU62
 244 0014 0361     		str	r3, [r0, #16]
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 31


 399:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 245              		.loc 1 399 3 is_stmt 1 view .LVU63
 399:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 246              		.loc 1 399 20 is_stmt 0 view .LVU64
 247 0016 0C22     		movs	r2, #12
 248 0018 4261     		str	r2, [r0, #20]
 400:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 249              		.loc 1 400 3 is_stmt 1 view .LVU65
 400:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 250              		.loc 1 400 25 is_stmt 0 view .LVU66
 251 001a 8361     		str	r3, [r0, #24]
 401:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 252              		.loc 1 401 3 is_stmt 1 view .LVU67
 401:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 253              		.loc 1 401 28 is_stmt 0 view .LVU68
 254 001c C361     		str	r3, [r0, #28]
 402:Core/Src/main.c ****   {
 255              		.loc 1 402 3 is_stmt 1 view .LVU69
 402:Core/Src/main.c ****   {
 256              		.loc 1 402 7 is_stmt 0 view .LVU70
 257 001e FFF7FEFF 		bl	HAL_UART_Init
 258              	.LVL3:
 402:Core/Src/main.c ****   {
 259              		.loc 1 402 6 view .LVU71
 260 0022 00B9     		cbnz	r0, .L10
 410:Core/Src/main.c **** 
 261              		.loc 1 410 1 view .LVU72
 262 0024 08BD     		pop	{r3, pc}
 263              	.L10:
 404:Core/Src/main.c ****   }
 264              		.loc 1 404 5 is_stmt 1 view .LVU73
 265 0026 FFF7FEFF 		bl	Error_Handler
 266              	.LVL4:
 267              	.L12:
 268 002a 00BF     		.align	2
 269              	.L11:
 270 002c 00000000 		.word	huart2
 271 0030 00440040 		.word	1073759232
 272              		.cfi_endproc
 273              	.LFE246:
 275              		.section	.text.MX_I2C1_Init,"ax",%progbits
 276              		.align	1
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 281              	MX_I2C1_Init:
 282              	.LFB245:
 351:Core/Src/main.c **** 
 283              		.loc 1 351 1 view -0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287 0000 08B5     		push	{r3, lr}
 288              	.LCFI4:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 3, -8
 291              		.cfi_offset 14, -4
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 32


 360:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 292              		.loc 1 360 3 view .LVU75
 360:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 293              		.loc 1 360 18 is_stmt 0 view .LVU76
 294 0002 0A48     		ldr	r0, .L17
 295 0004 0A4B     		ldr	r3, .L17+4
 296 0006 0360     		str	r3, [r0]
 361:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 297              		.loc 1 361 3 is_stmt 1 view .LVU77
 361:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 298              		.loc 1 361 25 is_stmt 0 view .LVU78
 299 0008 0A4B     		ldr	r3, .L17+8
 300 000a 4360     		str	r3, [r0, #4]
 362:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 301              		.loc 1 362 3 is_stmt 1 view .LVU79
 362:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 302              		.loc 1 362 24 is_stmt 0 view .LVU80
 303 000c 0023     		movs	r3, #0
 304 000e 8360     		str	r3, [r0, #8]
 363:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 305              		.loc 1 363 3 is_stmt 1 view .LVU81
 363:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 306              		.loc 1 363 26 is_stmt 0 view .LVU82
 307 0010 C360     		str	r3, [r0, #12]
 364:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 308              		.loc 1 364 3 is_stmt 1 view .LVU83
 364:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 309              		.loc 1 364 29 is_stmt 0 view .LVU84
 310 0012 4FF48042 		mov	r2, #16384
 311 0016 0261     		str	r2, [r0, #16]
 365:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 312              		.loc 1 365 3 is_stmt 1 view .LVU85
 365:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 313              		.loc 1 365 30 is_stmt 0 view .LVU86
 314 0018 4361     		str	r3, [r0, #20]
 366:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 315              		.loc 1 366 3 is_stmt 1 view .LVU87
 366:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 316              		.loc 1 366 26 is_stmt 0 view .LVU88
 317 001a 8361     		str	r3, [r0, #24]
 367:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 318              		.loc 1 367 3 is_stmt 1 view .LVU89
 367:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 319              		.loc 1 367 30 is_stmt 0 view .LVU90
 320 001c C361     		str	r3, [r0, #28]
 368:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 321              		.loc 1 368 3 is_stmt 1 view .LVU91
 368:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 322              		.loc 1 368 28 is_stmt 0 view .LVU92
 323 001e 0362     		str	r3, [r0, #32]
 369:Core/Src/main.c ****   {
 324              		.loc 1 369 3 is_stmt 1 view .LVU93
 369:Core/Src/main.c ****   {
 325              		.loc 1 369 7 is_stmt 0 view .LVU94
 326 0020 FFF7FEFF 		bl	HAL_I2C_Init
 327              	.LVL5:
 369:Core/Src/main.c ****   {
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 33


 328              		.loc 1 369 6 view .LVU95
 329 0024 00B9     		cbnz	r0, .L16
 377:Core/Src/main.c **** 
 330              		.loc 1 377 1 view .LVU96
 331 0026 08BD     		pop	{r3, pc}
 332              	.L16:
 371:Core/Src/main.c ****   }
 333              		.loc 1 371 5 is_stmt 1 view .LVU97
 334 0028 FFF7FEFF 		bl	Error_Handler
 335              	.LVL6:
 336              	.L18:
 337              		.align	2
 338              	.L17:
 339 002c 00000000 		.word	hi2c1
 340 0030 00540040 		.word	1073763328
 341 0034 A0860100 		.word	100000
 342              		.cfi_endproc
 343              	.LFE245:
 345              		.section	.text.MX_ADC1_Init,"ax",%progbits
 346              		.align	1
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	MX_ADC1_Init:
 352              	.LFB244:
 299:Core/Src/main.c **** 
 353              		.loc 1 299 1 view -0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 16
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 00B5     		push	{lr}
 358              	.LCFI5:
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 14, -4
 361 0002 85B0     		sub	sp, sp, #20
 362              	.LCFI6:
 363              		.cfi_def_cfa_offset 24
 305:Core/Src/main.c **** 
 364              		.loc 1 305 3 view .LVU99
 305:Core/Src/main.c **** 
 365              		.loc 1 305 26 is_stmt 0 view .LVU100
 366 0004 0023     		movs	r3, #0
 367 0006 0093     		str	r3, [sp]
 368 0008 0193     		str	r3, [sp, #4]
 369 000a 0293     		str	r3, [sp, #8]
 370 000c 0393     		str	r3, [sp, #12]
 313:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 371              		.loc 1 313 3 is_stmt 1 view .LVU101
 313:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 372              		.loc 1 313 18 is_stmt 0 view .LVU102
 373 000e 1448     		ldr	r0, .L25
 374 0010 144A     		ldr	r2, .L25+4
 375 0012 0260     		str	r2, [r0]
 314:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 376              		.loc 1 314 3 is_stmt 1 view .LVU103
 314:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 377              		.loc 1 314 29 is_stmt 0 view .LVU104
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 34


 378 0014 4FF48032 		mov	r2, #65536
 379 0018 4260     		str	r2, [r0, #4]
 315:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 380              		.loc 1 315 3 is_stmt 1 view .LVU105
 315:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 381              		.loc 1 315 25 is_stmt 0 view .LVU106
 382 001a 8360     		str	r3, [r0, #8]
 316:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 383              		.loc 1 316 3 is_stmt 1 view .LVU107
 316:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 384              		.loc 1 316 27 is_stmt 0 view .LVU108
 385 001c 0361     		str	r3, [r0, #16]
 317:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 386              		.loc 1 317 3 is_stmt 1 view .LVU109
 317:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 387              		.loc 1 317 33 is_stmt 0 view .LVU110
 388 001e 0376     		strb	r3, [r0, #24]
 318:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 389              		.loc 1 318 3 is_stmt 1 view .LVU111
 318:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 390              		.loc 1 318 36 is_stmt 0 view .LVU112
 391 0020 80F82030 		strb	r3, [r0, #32]
 319:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 392              		.loc 1 319 3 is_stmt 1 view .LVU113
 319:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 393              		.loc 1 319 35 is_stmt 0 view .LVU114
 394 0024 C362     		str	r3, [r0, #44]
 320:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 395              		.loc 1 320 3 is_stmt 1 view .LVU115
 320:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 396              		.loc 1 320 31 is_stmt 0 view .LVU116
 397 0026 104A     		ldr	r2, .L25+8
 398 0028 8262     		str	r2, [r0, #40]
 321:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 399              		.loc 1 321 3 is_stmt 1 view .LVU117
 321:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 400              		.loc 1 321 24 is_stmt 0 view .LVU118
 401 002a C360     		str	r3, [r0, #12]
 322:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 402              		.loc 1 322 3 is_stmt 1 view .LVU119
 322:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 403              		.loc 1 322 30 is_stmt 0 view .LVU120
 404 002c 0122     		movs	r2, #1
 405 002e C261     		str	r2, [r0, #28]
 323:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 406              		.loc 1 323 3 is_stmt 1 view .LVU121
 323:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 407              		.loc 1 323 36 is_stmt 0 view .LVU122
 408 0030 80F83030 		strb	r3, [r0, #48]
 324:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 409              		.loc 1 324 3 is_stmt 1 view .LVU123
 324:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 410              		.loc 1 324 27 is_stmt 0 view .LVU124
 411 0034 4261     		str	r2, [r0, #20]
 325:Core/Src/main.c ****   {
 412              		.loc 1 325 3 is_stmt 1 view .LVU125
 325:Core/Src/main.c ****   {
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 35


 413              		.loc 1 325 7 is_stmt 0 view .LVU126
 414 0036 FFF7FEFF 		bl	HAL_ADC_Init
 415              	.LVL7:
 325:Core/Src/main.c ****   {
 416              		.loc 1 325 6 view .LVU127
 417 003a 60B9     		cbnz	r0, .L23
 332:Core/Src/main.c ****   sConfig.Rank = 1;
 418              		.loc 1 332 3 is_stmt 1 view .LVU128
 332:Core/Src/main.c ****   sConfig.Rank = 1;
 419              		.loc 1 332 19 is_stmt 0 view .LVU129
 420 003c 0023     		movs	r3, #0
 421 003e 0093     		str	r3, [sp]
 333:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 422              		.loc 1 333 3 is_stmt 1 view .LVU130
 333:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 423              		.loc 1 333 16 is_stmt 0 view .LVU131
 424 0040 0122     		movs	r2, #1
 425 0042 0192     		str	r2, [sp, #4]
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 426              		.loc 1 334 3 is_stmt 1 view .LVU132
 334:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 427              		.loc 1 334 24 is_stmt 0 view .LVU133
 428 0044 0293     		str	r3, [sp, #8]
 335:Core/Src/main.c ****   {
 429              		.loc 1 335 3 is_stmt 1 view .LVU134
 335:Core/Src/main.c ****   {
 430              		.loc 1 335 7 is_stmt 0 view .LVU135
 431 0046 6946     		mov	r1, sp
 432 0048 0548     		ldr	r0, .L25
 433 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 434              	.LVL8:
 335:Core/Src/main.c ****   {
 435              		.loc 1 335 6 view .LVU136
 436 004e 20B9     		cbnz	r0, .L24
 343:Core/Src/main.c **** 
 437              		.loc 1 343 1 view .LVU137
 438 0050 05B0     		add	sp, sp, #20
 439              	.LCFI7:
 440              		.cfi_remember_state
 441              		.cfi_def_cfa_offset 4
 442              		@ sp needed
 443 0052 5DF804FB 		ldr	pc, [sp], #4
 444              	.L23:
 445              	.LCFI8:
 446              		.cfi_restore_state
 327:Core/Src/main.c ****   }
 447              		.loc 1 327 5 is_stmt 1 view .LVU138
 448 0056 FFF7FEFF 		bl	Error_Handler
 449              	.LVL9:
 450              	.L24:
 337:Core/Src/main.c ****   }
 451              		.loc 1 337 5 view .LVU139
 452 005a FFF7FEFF 		bl	Error_Handler
 453              	.LVL10:
 454              	.L26:
 455 005e 00BF     		.align	2
 456              	.L25:
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 36


 457 0060 00000000 		.word	hadc1
 458 0064 00200140 		.word	1073815552
 459 0068 0100000F 		.word	251658241
 460              		.cfi_endproc
 461              	.LFE244:
 463              		.section	.text.MX_SPI1_Init,"ax",%progbits
 464              		.align	1
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 469              	MX_SPI1_Init:
 470              	.LFB248:
 451:Core/Src/main.c **** 
 471              		.loc 1 451 27 view -0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475 0000 08B5     		push	{r3, lr}
 476              	.LCFI9:
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 3, -8
 479              		.cfi_offset 14, -4
 453:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 480              		.loc 1 453 3 view .LVU141
 453:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 481              		.loc 1 453 18 is_stmt 0 view .LVU142
 482 0002 0D48     		ldr	r0, .L31
 483 0004 0D4B     		ldr	r3, .L31+4
 484 0006 0360     		str	r3, [r0]
 454:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 485              		.loc 1 454 3 is_stmt 1 view .LVU143
 454:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 486              		.loc 1 454 19 is_stmt 0 view .LVU144
 487 0008 4FF48273 		mov	r3, #260
 488 000c 4360     		str	r3, [r0, #4]
 455:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 489              		.loc 1 455 3 is_stmt 1 view .LVU145
 455:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 490              		.loc 1 455 24 is_stmt 0 view .LVU146
 491 000e 0023     		movs	r3, #0
 492 0010 8360     		str	r3, [r0, #8]
 456:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 493              		.loc 1 456 3 is_stmt 1 view .LVU147
 456:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 494              		.loc 1 456 23 is_stmt 0 view .LVU148
 495 0012 C360     		str	r3, [r0, #12]
 457:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 496              		.loc 1 457 3 is_stmt 1 view .LVU149
 457:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 497              		.loc 1 457 26 is_stmt 0 view .LVU150
 498 0014 0361     		str	r3, [r0, #16]
 458:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 499              		.loc 1 458 3 is_stmt 1 view .LVU151
 458:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 500              		.loc 1 458 23 is_stmt 0 view .LVU152
 501 0016 4361     		str	r3, [r0, #20]
 459:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 37


 502              		.loc 1 459 3 is_stmt 1 view .LVU153
 459:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 503              		.loc 1 459 18 is_stmt 0 view .LVU154
 504 0018 4FF40072 		mov	r2, #512
 505 001c 8261     		str	r2, [r0, #24]
 460:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 506              		.loc 1 460 3 is_stmt 1 view .LVU155
 460:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 507              		.loc 1 460 32 is_stmt 0 view .LVU156
 508 001e 1022     		movs	r2, #16
 509 0020 C261     		str	r2, [r0, #28]
 461:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 510              		.loc 1 461 3 is_stmt 1 view .LVU157
 461:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 511              		.loc 1 461 23 is_stmt 0 view .LVU158
 512 0022 0362     		str	r3, [r0, #32]
 462:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 513              		.loc 1 462 3 is_stmt 1 view .LVU159
 462:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 514              		.loc 1 462 21 is_stmt 0 view .LVU160
 515 0024 4362     		str	r3, [r0, #36]
 463:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 516              		.loc 1 463 3 is_stmt 1 view .LVU161
 463:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 10;
 517              		.loc 1 463 29 is_stmt 0 view .LVU162
 518 0026 8362     		str	r3, [r0, #40]
 464:Core/Src/main.c ****   if(HAL_SPI_Init(&hspi1) != HAL_OK)
 519              		.loc 1 464 3 is_stmt 1 view .LVU163
 464:Core/Src/main.c ****   if(HAL_SPI_Init(&hspi1) != HAL_OK)
 520              		.loc 1 464 28 is_stmt 0 view .LVU164
 521 0028 0A23     		movs	r3, #10
 522 002a C362     		str	r3, [r0, #44]
 465:Core/Src/main.c ****     Error_Handler();
 523              		.loc 1 465 3 is_stmt 1 view .LVU165
 465:Core/Src/main.c ****     Error_Handler();
 524              		.loc 1 465 6 is_stmt 0 view .LVU166
 525 002c FFF7FEFF 		bl	HAL_SPI_Init
 526              	.LVL11:
 465:Core/Src/main.c ****     Error_Handler();
 527              		.loc 1 465 5 view .LVU167
 528 0030 00B9     		cbnz	r0, .L30
 467:Core/Src/main.c **** 
 529              		.loc 1 467 1 view .LVU168
 530 0032 08BD     		pop	{r3, pc}
 531              	.L30:
 466:Core/Src/main.c **** }
 532              		.loc 1 466 5 is_stmt 1 view .LVU169
 533 0034 FFF7FEFF 		bl	Error_Handler
 534              	.LVL12:
 535              	.L32:
 536              		.align	2
 537              	.L31:
 538 0038 00000000 		.word	hspi1
 539 003c 00300140 		.word	1073819648
 540              		.cfi_endproc
 541              	.LFE248:
 543              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 38


 544              		.align	1
 545              		.global	SystemClock_Config
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 550              	SystemClock_Config:
 551              	.LFB243:
 251:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 552              		.loc 1 251 1 view -0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 80
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556 0000 00B5     		push	{lr}
 557              	.LCFI10:
 558              		.cfi_def_cfa_offset 4
 559              		.cfi_offset 14, -4
 560 0002 95B0     		sub	sp, sp, #84
 561              	.LCFI11:
 562              		.cfi_def_cfa_offset 88
 252:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 563              		.loc 1 252 3 view .LVU171
 252:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 564              		.loc 1 252 22 is_stmt 0 view .LVU172
 565 0004 3422     		movs	r2, #52
 566 0006 0021     		movs	r1, #0
 567 0008 07A8     		add	r0, sp, #28
 568 000a FFF7FEFF 		bl	memset
 569              	.LVL13:
 253:Core/Src/main.c **** 
 570              		.loc 1 253 3 is_stmt 1 view .LVU173
 253:Core/Src/main.c **** 
 571              		.loc 1 253 22 is_stmt 0 view .LVU174
 572 000e 0023     		movs	r3, #0
 573 0010 0293     		str	r3, [sp, #8]
 574 0012 0393     		str	r3, [sp, #12]
 575 0014 0493     		str	r3, [sp, #16]
 576 0016 0593     		str	r3, [sp, #20]
 577 0018 0693     		str	r3, [sp, #24]
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 578              		.loc 1 257 3 is_stmt 1 view .LVU175
 579              	.LBB10:
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 580              		.loc 1 257 3 view .LVU176
 581 001a 0093     		str	r3, [sp]
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 582              		.loc 1 257 3 view .LVU177
 583 001c 1F4A     		ldr	r2, .L39
 584 001e 116C     		ldr	r1, [r2, #64]
 585 0020 41F08051 		orr	r1, r1, #268435456
 586 0024 1164     		str	r1, [r2, #64]
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 587              		.loc 1 257 3 view .LVU178
 588 0026 126C     		ldr	r2, [r2, #64]
 589 0028 02F08052 		and	r2, r2, #268435456
 590 002c 0092     		str	r2, [sp]
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 591              		.loc 1 257 3 view .LVU179
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 39


 592 002e 009A     		ldr	r2, [sp]
 593              	.LBE10:
 257:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 594              		.loc 1 257 3 view .LVU180
 258:Core/Src/main.c **** 
 595              		.loc 1 258 3 view .LVU181
 596              	.LBB11:
 258:Core/Src/main.c **** 
 597              		.loc 1 258 3 view .LVU182
 598 0030 0193     		str	r3, [sp, #4]
 258:Core/Src/main.c **** 
 599              		.loc 1 258 3 view .LVU183
 600 0032 1B49     		ldr	r1, .L39+4
 601 0034 0A68     		ldr	r2, [r1]
 602 0036 22F44042 		bic	r2, r2, #49152
 603 003a 42F48042 		orr	r2, r2, #16384
 604 003e 0A60     		str	r2, [r1]
 258:Core/Src/main.c **** 
 605              		.loc 1 258 3 view .LVU184
 606 0040 0A68     		ldr	r2, [r1]
 607 0042 02F44042 		and	r2, r2, #49152
 608 0046 0192     		str	r2, [sp, #4]
 258:Core/Src/main.c **** 
 609              		.loc 1 258 3 view .LVU185
 610 0048 019A     		ldr	r2, [sp, #4]
 611              	.LBE11:
 258:Core/Src/main.c **** 
 612              		.loc 1 258 3 view .LVU186
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 613              		.loc 1 263 3 view .LVU187
 263:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 614              		.loc 1 263 36 is_stmt 0 view .LVU188
 615 004a 0222     		movs	r2, #2
 616 004c 0792     		str	r2, [sp, #28]
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 617              		.loc 1 264 3 is_stmt 1 view .LVU189
 264:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 618              		.loc 1 264 30 is_stmt 0 view .LVU190
 619 004e 0121     		movs	r1, #1
 620 0050 0A91     		str	r1, [sp, #40]
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 621              		.loc 1 265 3 is_stmt 1 view .LVU191
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 622              		.loc 1 265 41 is_stmt 0 view .LVU192
 623 0052 1021     		movs	r1, #16
 624 0054 0B91     		str	r1, [sp, #44]
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 625              		.loc 1 266 3 is_stmt 1 view .LVU193
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 626              		.loc 1 266 34 is_stmt 0 view .LVU194
 627 0056 0D92     		str	r2, [sp, #52]
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 628              		.loc 1 267 3 is_stmt 1 view .LVU195
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 629              		.loc 1 267 35 is_stmt 0 view .LVU196
 630 0058 0E93     		str	r3, [sp, #56]
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 40


 631              		.loc 1 268 3 is_stmt 1 view .LVU197
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 632              		.loc 1 268 30 is_stmt 0 view .LVU198
 633 005a 0F91     		str	r1, [sp, #60]
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 634              		.loc 1 269 3 is_stmt 1 view .LVU199
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 635              		.loc 1 269 30 is_stmt 0 view .LVU200
 636 005c 4FF4A873 		mov	r3, #336
 637 0060 1093     		str	r3, [sp, #64]
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 638              		.loc 1 270 3 is_stmt 1 view .LVU201
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 639              		.loc 1 270 30 is_stmt 0 view .LVU202
 640 0062 0423     		movs	r3, #4
 641 0064 1193     		str	r3, [sp, #68]
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 642              		.loc 1 271 3 is_stmt 1 view .LVU203
 271:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 643              		.loc 1 271 30 is_stmt 0 view .LVU204
 644 0066 1292     		str	r2, [sp, #72]
 272:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 645              		.loc 1 272 3 is_stmt 1 view .LVU205
 272:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 646              		.loc 1 272 30 is_stmt 0 view .LVU206
 647 0068 1392     		str	r2, [sp, #76]
 273:Core/Src/main.c ****   {
 648              		.loc 1 273 3 is_stmt 1 view .LVU207
 273:Core/Src/main.c ****   {
 649              		.loc 1 273 7 is_stmt 0 view .LVU208
 650 006a 07A8     		add	r0, sp, #28
 651 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 652              	.LVL14:
 273:Core/Src/main.c ****   {
 653              		.loc 1 273 6 view .LVU209
 654 0070 80B9     		cbnz	r0, .L37
 280:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 655              		.loc 1 280 3 is_stmt 1 view .LVU210
 280:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 656              		.loc 1 280 31 is_stmt 0 view .LVU211
 657 0072 0F23     		movs	r3, #15
 658 0074 0293     		str	r3, [sp, #8]
 282:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 659              		.loc 1 282 3 is_stmt 1 view .LVU212
 282:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 660              		.loc 1 282 34 is_stmt 0 view .LVU213
 661 0076 0221     		movs	r1, #2
 662 0078 0391     		str	r1, [sp, #12]
 283:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 663              		.loc 1 283 3 is_stmt 1 view .LVU214
 283:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 664              		.loc 1 283 35 is_stmt 0 view .LVU215
 665 007a 0023     		movs	r3, #0
 666 007c 0493     		str	r3, [sp, #16]
 284:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 667              		.loc 1 284 3 is_stmt 1 view .LVU216
 284:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 41


 668              		.loc 1 284 36 is_stmt 0 view .LVU217
 669 007e 4FF48052 		mov	r2, #4096
 670 0082 0592     		str	r2, [sp, #20]
 285:Core/Src/main.c **** 
 671              		.loc 1 285 3 is_stmt 1 view .LVU218
 285:Core/Src/main.c **** 
 672              		.loc 1 285 36 is_stmt 0 view .LVU219
 673 0084 0693     		str	r3, [sp, #24]
 287:Core/Src/main.c ****   {
 674              		.loc 1 287 3 is_stmt 1 view .LVU220
 287:Core/Src/main.c ****   {
 675              		.loc 1 287 7 is_stmt 0 view .LVU221
 676 0086 02A8     		add	r0, sp, #8
 677 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 678              	.LVL15:
 287:Core/Src/main.c ****   {
 679              		.loc 1 287 6 view .LVU222
 680 008c 20B9     		cbnz	r0, .L38
 291:Core/Src/main.c **** 
 681              		.loc 1 291 1 view .LVU223
 682 008e 15B0     		add	sp, sp, #84
 683              	.LCFI12:
 684              		.cfi_remember_state
 685              		.cfi_def_cfa_offset 4
 686              		@ sp needed
 687 0090 5DF804FB 		ldr	pc, [sp], #4
 688              	.L37:
 689              	.LCFI13:
 690              		.cfi_restore_state
 275:Core/Src/main.c ****   }
 691              		.loc 1 275 5 is_stmt 1 view .LVU224
 692 0094 FFF7FEFF 		bl	Error_Handler
 693              	.LVL16:
 694              	.L38:
 289:Core/Src/main.c ****   }
 695              		.loc 1 289 5 view .LVU225
 696 0098 FFF7FEFF 		bl	Error_Handler
 697              	.LVL17:
 698              	.L40:
 699              		.align	2
 700              	.L39:
 701 009c 00380240 		.word	1073887232
 702 00a0 00700040 		.word	1073770496
 703              		.cfi_endproc
 704              	.LFE243:
 706              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 707              		.align	2
 708              	.LC0:
 709 0000 53746172 		.ascii	"Start!\015\012\000"
 709      74210D0A 
 709      00
 710 0009 000000   		.align	2
 711              	.LC1:
 712 000c 5472616E 		.ascii	"Transmited\015\012\000"
 712      736D6974 
 712      65640D0A 
 712      00
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 42


 713 0019 000000   		.align	2
 714              	.LC2:
 715 001c 4661696C 		.ascii	"Failed\015\012\000"
 715      65640D0A 
 715      00
 716 0025 000000   		.align	2
 717              	.LC3:
 718 0028 256C750D 		.ascii	"%lu\015\012\000"
 718      0A00
 719              		.section	.text.main,"ax",%progbits
 720              		.align	1
 721              		.global	main
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 726              	main:
 727              	.LFB242:
 112:Core/Src/main.c **** 
 728              		.loc 1 112 1 view -0
 729              		.cfi_startproc
 730              		@ args = 0, pretend = 0, frame = 72
 731              		@ frame_needed = 0, uses_anonymous_args = 0
 732 0000 00B5     		push	{lr}
 733              	.LCFI14:
 734              		.cfi_def_cfa_offset 4
 735              		.cfi_offset 14, -4
 736 0002 95B0     		sub	sp, sp, #84
 737              	.LCFI15:
 738              		.cfi_def_cfa_offset 88
 121:Core/Src/main.c **** 
 739              		.loc 1 121 3 view .LVU227
 740 0004 FFF7FEFF 		bl	HAL_Init
 741              	.LVL18:
 125:Core/Src/main.c ****   char str[32];
 742              		.loc 1 125 3 view .LVU228
 126:Core/Src/main.c ****   uint32_t analog_value;
 743              		.loc 1 126 3 view .LVU229
 127:Core/Src/main.c ****   int size_len;
 744              		.loc 1 127 3 view .LVU230
 128:Core/Src/main.c ****   uint16_t addr = 4;
 745              		.loc 1 128 3 view .LVU231
 129:Core/Src/main.c ****   HAL_StatusTypeDef ret;
 746              		.loc 1 129 3 view .LVU232
 130:Core/Src/main.c ****   
 747              		.loc 1 130 3 view .LVU233
 136:Core/Src/main.c **** 
 748              		.loc 1 136 3 view .LVU234
 749 0008 FFF7FEFF 		bl	SystemClock_Config
 750              	.LVL19:
 143:Core/Src/main.c ****   MX_USART2_UART_Init();
 751              		.loc 1 143 3 view .LVU235
 752 000c FFF7FEFF 		bl	MX_GPIO_Init
 753              	.LVL20:
 144:Core/Src/main.c ****   MX_I2C1_Init();
 754              		.loc 1 144 3 view .LVU236
 755 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 756              	.LVL21:
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 43


 145:Core/Src/main.c ****   MX_ADC1_Init();
 757              		.loc 1 145 3 view .LVU237
 758 0014 FFF7FEFF 		bl	MX_I2C1_Init
 759              	.LVL22:
 146:Core/Src/main.c ****   MX_SPI1_Init();
 760              		.loc 1 146 3 view .LVU238
 761 0018 FFF7FEFF 		bl	MX_ADC1_Init
 762              	.LVL23:
 147:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 763              		.loc 1 147 3 view .LVU239
 764 001c FFF7FEFF 		bl	MX_SPI1_Init
 765              	.LVL24:
 150:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 766              		.loc 1 150 3 view .LVU240
 767 0020 384A     		ldr	r2, .L48
 768 0022 11AB     		add	r3, sp, #68
 769 0024 07CA     		ldm	r2, {r0, r1, r2}
 770 0026 03C3     		stmia	r3!, {r0, r1}
 771 0028 1A70     		strb	r2, [r3]
 151:Core/Src/main.c ****   //strcpy((char*)buf, "Hello!\r\n");
 772              		.loc 1 151 3 view .LVU241
 151:Core/Src/main.c ****   //strcpy((char*)buf, "Hello!\r\n");
 773              		.loc 1 151 35 is_stmt 0 view .LVU242
 774 002a 11A8     		add	r0, sp, #68
 775 002c FFF7FEFF 		bl	strlen
 776              	.LVL25:
 151:Core/Src/main.c ****   //strcpy((char*)buf, "Hello!\r\n");
 777              		.loc 1 151 3 view .LVU243
 778 0030 4FF0FF33 		mov	r3, #-1
 779 0034 82B2     		uxth	r2, r0
 780 0036 11A9     		add	r1, sp, #68
 781 0038 3348     		ldr	r0, .L48+4
 782 003a FFF7FEFF 		bl	HAL_UART_Transmit
 783              	.LVL26:
 154:Core/Src/main.c ****   /*ret = HAL_I2C_Master_Transmit(&hi2c1, BH1750_GROUND_ADDR_WRITE, i2c_buf, 1, 200);
 784              		.loc 1 154 3 is_stmt 1 view .LVU244
 154:Core/Src/main.c ****   /*ret = HAL_I2C_Master_Transmit(&hi2c1, BH1750_GROUND_ADDR_WRITE, i2c_buf, 1, 200);
 785              		.loc 1 154 14 is_stmt 0 view .LVU245
 786 003e 1023     		movs	r3, #16
 787 0040 8DF84030 		strb	r3, [sp, #64]
 788 0044 2BE0     		b	.L46
 789              	.LVL27:
 790              	.L42:
 223:Core/Src/main.c ****         strcpy((char*)serialbuf, "Failed\r\n");
 791              		.loc 1 223 9 is_stmt 1 view .LVU246
 792 0046 0023     		movs	r3, #0
 793 0048 8DF82C30 		strb	r3, [sp, #44]
 224:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 794              		.loc 1 224 9 view .LVU247
 795 004c 2F4A     		ldr	r2, .L48+8
 796 004e 0BAB     		add	r3, sp, #44
 797 0050 07CA     		ldm	r2, {r0, r1, r2}
 798              	.LVL28:
 224:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 799              		.loc 1 224 9 is_stmt 0 view .LVU248
 800 0052 03C3     		stmia	r3!, {r0, r1}
 801 0054 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 44


 225:Core/Src/main.c ****     }
 802              		.loc 1 225 9 is_stmt 1 view .LVU249
 225:Core/Src/main.c ****     }
 803              		.loc 1 225 47 is_stmt 0 view .LVU250
 804 0056 0BA8     		add	r0, sp, #44
 805 0058 FFF7FEFF 		bl	strlen
 806              	.LVL29:
 225:Core/Src/main.c ****     }
 807              		.loc 1 225 9 view .LVU251
 808 005c 4FF0FF33 		mov	r3, #-1
 809 0060 82B2     		uxth	r2, r0
 810 0062 0BA9     		add	r1, sp, #44
 811 0064 2848     		ldr	r0, .L48+4
 812 0066 FFF7FEFF 		bl	HAL_UART_Transmit
 813              	.LVL30:
 814              	.L43:
 228:Core/Src/main.c ****     if(ret == HAL_OK){      
 815              		.loc 1 228 5 is_stmt 1 view .LVU252
 228:Core/Src/main.c ****     if(ret == HAL_OK){      
 816              		.loc 1 228 11 is_stmt 0 view .LVU253
 817 006a C823     		movs	r3, #200
 818 006c 0093     		str	r3, [sp]
 819 006e 0223     		movs	r3, #2
 820 0070 10AA     		add	r2, sp, #64
 821 0072 4721     		movs	r1, #71
 822 0074 2648     		ldr	r0, .L48+12
 823 0076 FFF7FEFF 		bl	HAL_I2C_Master_Receive
 824              	.LVL31:
 229:Core/Src/main.c ****       size_len = sprintf(str, "%lu\r\n", i2c_buf);
 825              		.loc 1 229 5 is_stmt 1 view .LVU254
 229:Core/Src/main.c ****       size_len = sprintf(str, "%lu\r\n", i2c_buf);
 826              		.loc 1 229 7 is_stmt 0 view .LVU255
 827 007a 0028     		cmp	r0, #0
 828 007c 2FD1     		bne	.L44
 230:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 829              		.loc 1 230 7 is_stmt 1 view .LVU256
 230:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 830              		.loc 1 230 18 is_stmt 0 view .LVU257
 831 007e 10AA     		add	r2, sp, #64
 832 0080 2449     		ldr	r1, .L48+16
 833 0082 03A8     		add	r0, sp, #12
 834              	.LVL32:
 230:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, (uint8_t*)str, size_len, HAL_MAX_DELAY);
 835              		.loc 1 230 18 view .LVU258
 836 0084 FFF7FEFF 		bl	sprintf
 837              	.LVL33:
 231:Core/Src/main.c ****     }else{
 838              		.loc 1 231 7 is_stmt 1 view .LVU259
 839 0088 4FF0FF33 		mov	r3, #-1
 840 008c 82B2     		uxth	r2, r0
 841 008e 03A9     		add	r1, sp, #12
 842 0090 1D48     		ldr	r0, .L48+4
 843              	.LVL34:
 231:Core/Src/main.c ****     }else{
 844              		.loc 1 231 7 is_stmt 0 view .LVU260
 845 0092 FFF7FEFF 		bl	HAL_UART_Transmit
 846              	.LVL35:
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 45


 847              	.L45:
 237:Core/Src/main.c ****     
 848              		.loc 1 237 5 is_stmt 1 view .LVU261
 849 0096 4FF47A70 		mov	r0, #1000
 850 009a FFF7FEFF 		bl	HAL_Delay
 851              	.LVL36:
 170:Core/Src/main.c ****   {
 852              		.loc 1 170 9 view .LVU262
 853              	.L46:
 170:Core/Src/main.c ****   {
 854              		.loc 1 170 3 view .LVU263
 217:Core/Src/main.c ****     if(ret == HAL_OK){      
 855              		.loc 1 217 5 view .LVU264
 217:Core/Src/main.c ****     if(ret == HAL_OK){      
 856              		.loc 1 217 11 is_stmt 0 view .LVU265
 857 009e C823     		movs	r3, #200
 858 00a0 0093     		str	r3, [sp]
 859 00a2 0123     		movs	r3, #1
 860 00a4 10AA     		add	r2, sp, #64
 861 00a6 4621     		movs	r1, #70
 862 00a8 1948     		ldr	r0, .L48+12
 863 00aa FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 864              	.LVL37:
 218:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 865              		.loc 1 218 5 is_stmt 1 view .LVU266
 218:Core/Src/main.c ****       strcpy((char*)serialbuf, "");
 866              		.loc 1 218 7 is_stmt 0 view .LVU267
 867 00ae 0028     		cmp	r0, #0
 868 00b0 C9D1     		bne	.L42
 219:Core/Src/main.c ****       strcpy((char*)serialbuf, "Transmited\r\n");
 869              		.loc 1 219 7 is_stmt 1 view .LVU268
 870 00b2 0023     		movs	r3, #0
 871 00b4 8DF82C30 		strb	r3, [sp, #44]
 220:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 872              		.loc 1 220 7 view .LVU269
 873 00b8 174B     		ldr	r3, .L48+20
 874 00ba 0DF12C0C 		add	ip, sp, #44
 875 00be 0FCB     		ldm	r3, {r0, r1, r2, r3}
 876              	.LVL38:
 220:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 877              		.loc 1 220 7 is_stmt 0 view .LVU270
 878 00c0 ACE80700 		stmia	ip!, {r0, r1, r2}
 879 00c4 8CF80030 		strb	r3, [ip]
 221:Core/Src/main.c ****     }else{
 880              		.loc 1 221 7 is_stmt 1 view .LVU271
 221:Core/Src/main.c ****     }else{
 881              		.loc 1 221 45 is_stmt 0 view .LVU272
 882 00c8 0BA8     		add	r0, sp, #44
 883 00ca FFF7FEFF 		bl	strlen
 884              	.LVL39:
 221:Core/Src/main.c ****     }else{
 885              		.loc 1 221 7 view .LVU273
 886 00ce 4FF0FF33 		mov	r3, #-1
 887 00d2 82B2     		uxth	r2, r0
 888 00d4 0BA9     		add	r1, sp, #44
 889 00d6 0C48     		ldr	r0, .L48+4
 890 00d8 FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 46


 891              	.LVL40:
 892 00dc C5E7     		b	.L43
 893              	.LVL41:
 894              	.L44:
 233:Core/Src/main.c ****         strcpy((char*)serialbuf, "Failed\r\n");
 895              		.loc 1 233 9 is_stmt 1 view .LVU274
 896 00de 0023     		movs	r3, #0
 897 00e0 8DF82C30 		strb	r3, [sp, #44]
 234:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 898              		.loc 1 234 9 view .LVU275
 899 00e4 094A     		ldr	r2, .L48+8
 900 00e6 0BAB     		add	r3, sp, #44
 901 00e8 07CA     		ldm	r2, {r0, r1, r2}
 902              	.LVL42:
 234:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, serialbuf, strlen((char*)serialbuf), HAL_MAX_DELAY);
 903              		.loc 1 234 9 is_stmt 0 view .LVU276
 904 00ea 03C3     		stmia	r3!, {r0, r1}
 905 00ec 1A70     		strb	r2, [r3]
 235:Core/Src/main.c ****     }
 906              		.loc 1 235 9 is_stmt 1 view .LVU277
 235:Core/Src/main.c ****     }
 907              		.loc 1 235 47 is_stmt 0 view .LVU278
 908 00ee 0BA8     		add	r0, sp, #44
 909 00f0 FFF7FEFF 		bl	strlen
 910              	.LVL43:
 235:Core/Src/main.c ****     }
 911              		.loc 1 235 9 view .LVU279
 912 00f4 4FF0FF33 		mov	r3, #-1
 913 00f8 82B2     		uxth	r2, r0
 914 00fa 0BA9     		add	r1, sp, #44
 915 00fc 0248     		ldr	r0, .L48+4
 916 00fe FFF7FEFF 		bl	HAL_UART_Transmit
 917              	.LVL44:
 918 0102 C8E7     		b	.L45
 919              	.L49:
 920              		.align	2
 921              	.L48:
 922 0104 00000000 		.word	.LC0
 923 0108 00000000 		.word	huart2
 924 010c 1C000000 		.word	.LC2
 925 0110 00000000 		.word	hi2c1
 926 0114 28000000 		.word	.LC3
 927 0118 0C000000 		.word	.LC1
 928              		.cfi_endproc
 929              	.LFE242:
 931              		.global	buff
 932              		.section	.bss.buff,"aw",%nobits
 933              		.align	2
 936              	buff:
 937 0000 0000     		.space	2
 938              		.global	hspi1
 939              		.section	.bss.hspi1,"aw",%nobits
 940              		.align	2
 943              	hspi1:
 944 0000 00000000 		.space	88
 944      00000000 
 944      00000000 
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 47


 944      00000000 
 944      00000000 
 945              		.global	huart2
 946              		.section	.bss.huart2,"aw",%nobits
 947              		.align	2
 950              	huart2:
 951 0000 00000000 		.space	72
 951      00000000 
 951      00000000 
 951      00000000 
 951      00000000 
 952              		.global	hi2c1
 953              		.section	.bss.hi2c1,"aw",%nobits
 954              		.align	2
 957              	hi2c1:
 958 0000 00000000 		.space	84
 958      00000000 
 958      00000000 
 958      00000000 
 958      00000000 
 959              		.global	hadc1
 960              		.section	.bss.hadc1,"aw",%nobits
 961              		.align	2
 964              	hadc1:
 965 0000 00000000 		.space	72
 965      00000000 
 965      00000000 
 965      00000000 
 965      00000000 
 966              		.text
 967              	.Letext0:
 968              		.file 3 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 969              		.file 4 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/../
 970              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 971              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 972              		.file 7 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/inc
 973              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 974              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 975              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 976              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 977              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 978              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 979              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_i2c.h"
 980              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 981              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 982              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 983              		.file 18 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 984              		.file 19 "C:\\ST\\STM32CubeCLT_1.17.0\\GNU-tools-for-STM32\\bin/../lib/gcc/arm-none-eabi/12.3.1/..
 985              		.file 20 "<built-in>"
ARM GAS  C:\Users\gabri\AppData\Local\Temp\cchUigNe.s 			page 48


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:165    .text.MX_GPIO_Init:0000009c $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:172    .text.Error_Handler:00000000 $t
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:178    .text.Error_Handler:00000000 Error_Handler
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:210    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:215    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:270    .text.MX_USART2_UART_Init:0000002c $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:950    .bss.huart2:00000000 huart2
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:276    .text.MX_I2C1_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:281    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:339    .text.MX_I2C1_Init:0000002c $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:957    .bss.hi2c1:00000000 hi2c1
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:346    .text.MX_ADC1_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:351    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:457    .text.MX_ADC1_Init:00000060 $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:964    .bss.hadc1:00000000 hadc1
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:464    .text.MX_SPI1_Init:00000000 $t
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:469    .text.MX_SPI1_Init:00000000 MX_SPI1_Init
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:538    .text.MX_SPI1_Init:00000038 $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:943    .bss.hspi1:00000000 hspi1
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:544    .text.SystemClock_Config:00000000 $t
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:550    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:701    .text.SystemClock_Config:0000009c $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:707    .rodata.main.str1.4:00000000 $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:720    .text.main:00000000 $t
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:726    .text.main:00000000 main
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:922    .text.main:00000104 $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:936    .bss.buff:00000000 buff
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:933    .bss.buff:00000000 $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:940    .bss.hspi1:00000000 $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:947    .bss.huart2:00000000 $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:954    .bss.hi2c1:00000000 $d
C:\Users\gabri\AppData\Local\Temp\cchUigNe.s:961    .bss.hadc1:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_I2C_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
strlen
HAL_UART_Transmit
HAL_I2C_Master_Receive
sprintf
HAL_Delay
HAL_I2C_Master_Transmit
